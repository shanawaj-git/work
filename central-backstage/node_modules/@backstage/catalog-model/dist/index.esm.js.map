{"version":3,"file":"index.esm.js","sources":["../src/entity/constants.ts","../src/entity/policies/DefaultNamespaceEntityPolicy.ts","../src/validation/CommonValidatorFunctions.ts","../src/validation/ajv.ts","../src/validation/entityEnvelopeSchemaValidator.ts","../src/validation/entityKindSchemaValidator.ts","../src/validation/entitySchemaValidator.ts","../src/validation/KubernetesValidatorFunctions.ts","../src/validation/makeValidator.ts","../src/entity/policies/FieldFormatEntityPolicy.ts","../src/entity/policies/NoForeignRootFieldsEntityPolicy.ts","../src/entity/policies/SchemaValidEntityPolicy.ts","../src/entity/ref.ts","../src/EntityPolicies.ts","../src/kinds/util.ts","../src/kinds/ApiEntityV1alpha1.ts","../src/kinds/ComponentEntityV1alpha1.ts","../src/kinds/DomainEntityV1alpha1.ts","../src/kinds/GroupEntityV1alpha1.ts","../src/kinds/LocationEntityV1alpha1.ts","../src/kinds/relations.ts","../src/kinds/ResourceEntityV1alpha1.ts","../src/kinds/SystemEntityV1alpha1.ts","../src/kinds/UserEntityV1alpha1.ts","../src/location/annotation.ts","../src/location/helpers.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The namespace that entities without an explicit namespace fall into.\n *\n * @public\n */\nexport const DEFAULT_NAMESPACE = 'default';\n\n/**\n * Annotation for linking to entity page from catalog pages.\n *\n * @public\n */\nexport const ANNOTATION_VIEW_URL = 'backstage.io/view-url';\n\n/**\n * Annotation for linking to entity edit page from catalog pages.\n *\n * @public\n */\nexport const ANNOTATION_EDIT_URL = 'backstage.io/edit-url';\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport lodash from 'lodash';\nimport { EntityPolicy } from './types';\nimport { DEFAULT_NAMESPACE } from '../constants';\nimport { Entity } from '../Entity';\n\n/**\n * Sets a default namespace if none was set.\n *\n * @public\n */\nexport class DefaultNamespaceEntityPolicy implements EntityPolicy {\n  private readonly namespace: string;\n\n  constructor(namespace: string = DEFAULT_NAMESPACE) {\n    this.namespace = namespace;\n  }\n\n  async enforce(entity: Entity): Promise<Entity> {\n    if (entity.metadata.namespace) {\n      return entity;\n    }\n\n    return lodash.merge({ metadata: { namespace: this.namespace } }, entity);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport lodash from 'lodash';\n\n/**\n * Contains various helper validation and normalization functions that can be\n * composed to form a Validator.\n *\n * @public\n */\nexport class CommonValidatorFunctions {\n  /**\n   * Checks that the value is on the form <suffix> or <prefix><separator><suffix>, and validates\n   * those parts separately.\n   *\n   * @param value - The value to check\n   * @param separator - The separator between parts\n   * @param isValidPrefix - Checks that the part before the separator is valid, if present\n   * @param isValidSuffix - Checks that the part after the separator (or the entire value if there is no separator) is valid\n   */\n  static isValidPrefixAndOrSuffix(\n    value: unknown,\n    separator: string,\n    isValidPrefix: (value: string) => boolean,\n    isValidSuffix: (value: string) => boolean,\n  ): boolean {\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    const parts = value.split(separator);\n    if (parts.length === 1) {\n      return isValidSuffix(parts[0]);\n    } else if (parts.length === 2) {\n      return isValidPrefix(parts[0]) && isValidSuffix(parts[1]);\n    }\n\n    return false;\n  }\n\n  /**\n   * Checks that the value can be safely transferred as JSON.\n   *\n   * @param value - The value to check\n   */\n  static isJsonSafe(value: unknown): boolean {\n    try {\n      return lodash.isEqual(value, JSON.parse(JSON.stringify(value)));\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Checks that the value is a valid DNS subdomain name.\n   *\n   * @param value - The value to check\n   * @see https://tools.ietf.org/html/rfc1123\n   */\n  static isValidDnsSubdomain(value: unknown): boolean {\n    return (\n      typeof value === 'string' &&\n      value.length >= 1 &&\n      value.length <= 253 &&\n      value.split('.').every(CommonValidatorFunctions.isValidDnsLabel)\n    );\n  }\n\n  /**\n   * Checks that the value is a valid DNS label.\n   *\n   * @param value - The value to check\n   * @see https://tools.ietf.org/html/rfc1123\n   */\n  static isValidDnsLabel(value: unknown): boolean {\n    return (\n      typeof value === 'string' &&\n      value.length >= 1 &&\n      value.length <= 63 &&\n      /^[a-z0-9]+(\\-[a-z0-9]+)*$/.test(value)\n    );\n  }\n\n  /**\n   * Checks that the value is a valid tag.\n   *\n   * @deprecated This will be removed in a future release\n   * @param value - The value to check\n   */\n  static isValidTag(value: unknown): boolean {\n    return (\n      typeof value === 'string' &&\n      value.length >= 1 &&\n      value.length <= 63 &&\n      /^[a-z0-9+#]+(\\-[a-z0-9+#]+)*$/.test(value)\n    );\n  }\n\n  /**\n   * Checks that the value is a valid string URL.\n   *\n   * @param value - The value to check\n   */\n  static isValidUrl(value: unknown): boolean {\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    try {\n      // eslint-disable-next-line no-new\n      new URL(value);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Checks that the value is a non empty string value.\n   *\n   * @deprecated use isNonEmptyString instead\n   * @param value - The value to check\n   */\n  static isValidString(value: unknown): boolean {\n    return typeof value === 'string' && value?.trim()?.length >= 1;\n  }\n\n  /**\n   * Checks that the value is a string value that's not empty.\n   *\n   * @param value - The value to check\n   */\n  static isNonEmptyString(value: unknown): value is string {\n    return typeof value === 'string' && value?.trim()?.length >= 1;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Ajv, { Schema, ValidateFunction } from 'ajv';\nimport entitySchema from '../schema/Entity.schema.json';\nimport entityEnvelopeSchema from '../schema/EntityEnvelope.schema.json';\nimport entityMetaSchema from '../schema/EntityMeta.schema.json';\nimport commonSchema from '../schema/shared/common.schema.json';\n\n// A local cache of compiled schemas, to avoid duplicate work.\n// The keys are JSON stringified versions of the schema\nconst compiledSchemaCache = new Map<string, ValidateFunction<unknown>>();\n\n// The core schemas that others can depend on\nconst refDependencyCandidates = [\n  entityEnvelopeSchema,\n  entitySchema,\n  entityMetaSchema,\n  commonSchema,\n];\n\nexport function throwAjvError(\n  errors: ValidateFunction<unknown>['errors'],\n): never {\n  if (!errors?.length) {\n    throw new TypeError('Unknown error');\n  }\n\n  const error = errors[0];\n  throw new TypeError(\n    `${error.dataPath || '<root>'} ${error.message}${\n      error.params\n        ? ` - ${Object.entries(error.params)\n            .map(([key, val]) => `${key}: ${val}`)\n            .join(', ')}`\n        : ''\n    }`,\n  );\n}\n\n// Compiles the given schema, and makes sure to also grab any core dependencies\n// that it depends on\nexport function compileAjvSchema(\n  schema: Schema,\n  options: { disableCache?: boolean } = {},\n): ValidateFunction<unknown> {\n  const disableCache = options?.disableCache ?? false;\n  const cacheKey = disableCache ? '' : JSON.stringify(schema);\n\n  if (!disableCache) {\n    const cached = compiledSchemaCache.get(cacheKey);\n    if (cached) {\n      return cached;\n    }\n  }\n\n  const extraSchemas = getExtraSchemas(schema);\n  const ajv = new Ajv({\n    allowUnionTypes: true,\n    allErrors: true,\n    validateSchema: true,\n  });\n  if (extraSchemas.length) {\n    ajv.addSchema(extraSchemas, undefined, undefined, true);\n  }\n  const compiled = ajv.compile(schema);\n\n  if (!disableCache) {\n    compiledSchemaCache.set(cacheKey, compiled);\n  }\n\n  return compiled;\n}\n\n// Find refs in the given schema and recursively in all known schemas it\n// targets, collecting that list of schemas as we go\nfunction getExtraSchemas(schema: Schema): Schema[] {\n  if (typeof schema !== 'object') {\n    return [];\n  }\n\n  const seen = new Set<string>();\n  if (schema.$id) {\n    seen.add(schema.$id);\n  }\n\n  const selected = new Array<Schema>();\n\n  const todo: Schema[] = [schema];\n  while (todo.length) {\n    const current = todo.pop()!;\n\n    for (const ref of getAllRefs(current)) {\n      if (!seen.has(ref)) {\n        seen.add(ref);\n\n        const match = refDependencyCandidates.find(c => c.$id === ref);\n        if (match) {\n          selected.push(match);\n          todo.push(match);\n        }\n      }\n    }\n  }\n\n  return selected;\n}\n\n// Naively step through the entire schema looking for \"$ref\": \"x\" pairs. The\n// resulting iterator may contain duplicates. Ignores fragments, i.e. for a ref\n// of \"a#b\", it will just yield \"a\".\nfunction* getAllRefs(schema: Schema): Iterable<string> {\n  const todo: any[] = [schema];\n  while (todo.length) {\n    const current = todo.pop()!;\n    if (typeof current === 'object' && current) {\n      for (const [key, value] of Object.entries(current)) {\n        if (key === '$ref' && typeof value === 'string') {\n          yield value.split('#')[0];\n        } else {\n          todo.push(value);\n        }\n      }\n    }\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Schema } from 'ajv';\nimport { EntityEnvelope } from '../entity/EntityEnvelope';\nimport entityEnvelopeSchema from '../schema/EntityEnvelope.schema.json';\nimport { compileAjvSchema, throwAjvError } from './ajv';\n\n/**\n * Creates a validation function that takes some arbitrary data, and either\n * returns that data cast to an {@link EntityEnvelope} (or the given subtype)\n * if it matches that schema, or throws a {@link globals#TypeError} describing the\n * errors.\n *\n * @remarks\n *\n * Note that this validator is only meant for applying the base schema checks;\n * it does not take custom policies or additional processor based validation\n * into account.\n *\n * By default, the plain `EntityEnvelope` schema is used. If you pass in your\n * own, it may contain `$ref` references to the following, which are resolved\n * automatically for you:\n *\n * - {@link EntityEnvelope}\n * - {@link Entity}\n * - {@link EntityMeta}\n * - `common#<id>`\n *\n * See also {@link https://github.com/backstage/backstage/tree/master/packages/catalog-model/src/schema}\n *\n * @public\n *\n */\nexport function entityEnvelopeSchemaValidator<\n  T extends EntityEnvelope = EntityEnvelope,\n>(schema?: unknown): (data: unknown) => T {\n  const validate = compileAjvSchema(\n    schema ? (schema as Schema) : entityEnvelopeSchema,\n  );\n\n  return data => {\n    const result = validate(data);\n    if (result === true) {\n      return data as T;\n    }\n\n    throw throwAjvError(validate.errors);\n  };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Schema } from 'ajv';\nimport { Entity } from '../entity';\nimport { compileAjvSchema, throwAjvError } from './ajv';\n\n/**\n * Creates a validation function that takes some arbitrary data, and either\n * returns that data cast to a `T` if it matches that schema, or `false` if the\n * schema apiVersion/kind didn't apply to that data, or throws a\n * {@link globals#TypeError} describing actual errors.\n *\n * @remarks\n *\n * This validator is highly specialized, in that it has special treatment of\n * the `kind` and `apiVersion` root keys. This only works if your schema has\n * their rule set to `\"enum\"`:\n *\n * ```\n * \"apiVersion\": {\n *    \"enum\": [\"backstage.io/v1alpha1\", \"backstage.io/v1beta1\"]\n * },\n * \"kind\": {\n *   \"enum\": [\"Group\"]\n * },\n * ```\n *\n * In the above example, the created validator will return `false` if and only\n * if the kind and/or apiVersion mismatch.\n *\n * Note that this validator is only meant for applying the base schema checks;\n * it does not take custom policies or additional processor based validation\n * into account.\n *\n * The given schema may contain `$ref` references to the following, which are\n * resolved automatically for you:\n *\n * - {@link Entity}\n *\n * - {@link EntityEnvelope}\n *\n * - {@link EntityMeta}\n *\n * - `common#<id>`\n * @see {@link https://github.com/backstage/backstage/tree/master/packages/catalog-model/src/schema}\n *\n * @public\n */\nexport function entityKindSchemaValidator<T extends Entity>(\n  schema: unknown,\n): (data: unknown) => T | false {\n  const validate = compileAjvSchema(schema as Schema);\n\n  return data => {\n    const result = validate(data);\n    if (result === true) {\n      return data as T;\n    }\n\n    // Only in the case where kind and/or apiVersion have enum mismatches AND\n    // have NO other errors, we call it a soft error.\n    const softCandidates = validate.errors?.filter(e =>\n      ['/kind', '/apiVersion'].includes(e.dataPath),\n    );\n    if (\n      softCandidates?.length &&\n      softCandidates.every(e => e.keyword === 'enum')\n    ) {\n      return false;\n    }\n\n    throw throwAjvError(validate.errors);\n  };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Schema } from 'ajv';\nimport { Entity } from '../entity/Entity';\nimport entitySchema from '../schema/Entity.schema.json';\nimport { compileAjvSchema, throwAjvError } from './ajv';\n\n/**\n * Creates a validation function that takes some arbitrary data, and either\n * returns that data cast to an {@link Entity} (or the given subtype) if it\n * matches that schema, or throws a {@link globals#TypeError} describing the errors.\n *\n * @remarks\n *\n * Note that this validator is only meant for applying the base schema checks;\n * it does not take custom policies or additional processor based validation\n * into account.\n *\n * By default, the plain {@link Entity} schema is used. If you pass in your own, it\n * may contain `$ref` references to the following, which are resolved\n * automatically for you:\n *\n * - {@link Entity}\n * - {@link EntityEnvelope}\n * - {@link EntityMeta}\n * - `common#<id>`\n *\n * @public\n * @see {@link https://github.com/backstage/backstage/tree/master/packages/catalog-model/src/schema}\n */\nexport function entitySchemaValidator<T extends Entity = Entity>(\n  schema?: unknown,\n): (data: unknown) => T {\n  const validate = compileAjvSchema(schema ? (schema as Schema) : entitySchema);\n\n  return data => {\n    const result = validate(data);\n    if (result === true) {\n      return data as T;\n    }\n\n    throw throwAjvError(validate.errors);\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonValidatorFunctions } from './CommonValidatorFunctions';\n\n/**\n * Contains validation functions that match the Kubernetes spec, usable to\n * build a catalog that is compatible with those rule sets.\n *\n * @public\n * @see https://kubernetes.io/docs/concepts/overview/working-with-objects/names/\n * @see https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set\n * @see https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set\n */\nexport class KubernetesValidatorFunctions {\n  static isValidApiVersion(value: unknown): boolean {\n    return CommonValidatorFunctions.isValidPrefixAndOrSuffix(\n      value,\n      '/',\n      CommonValidatorFunctions.isValidDnsSubdomain,\n      n => n.length >= 1 && n.length <= 63 && /^[a-z0-9A-Z]+$/.test(n),\n    );\n  }\n\n  static isValidKind(value: unknown): boolean {\n    return (\n      typeof value === 'string' &&\n      value.length >= 1 &&\n      value.length <= 63 &&\n      /^[a-zA-Z][a-z0-9A-Z]*$/.test(value)\n    );\n  }\n\n  static isValidObjectName(value: unknown): boolean {\n    return (\n      typeof value === 'string' &&\n      value.length >= 1 &&\n      value.length <= 63 &&\n      /^([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]$/.test(value)\n    );\n  }\n\n  static isValidNamespace(value: unknown): boolean {\n    return CommonValidatorFunctions.isValidDnsLabel(value);\n  }\n\n  static isValidLabelKey(value: unknown): boolean {\n    return CommonValidatorFunctions.isValidPrefixAndOrSuffix(\n      value,\n      '/',\n      CommonValidatorFunctions.isValidDnsSubdomain,\n      KubernetesValidatorFunctions.isValidObjectName,\n    );\n  }\n\n  static isValidLabelValue(value: unknown): boolean {\n    return (\n      value === '' || KubernetesValidatorFunctions.isValidObjectName(value)\n    );\n  }\n\n  static isValidAnnotationKey(value: unknown): boolean {\n    return CommonValidatorFunctions.isValidPrefixAndOrSuffix(\n      value,\n      '/',\n      CommonValidatorFunctions.isValidDnsSubdomain,\n      KubernetesValidatorFunctions.isValidObjectName,\n    );\n  }\n\n  static isValidAnnotationValue(value: unknown): boolean {\n    return typeof value === 'string';\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { KubernetesValidatorFunctions } from './KubernetesValidatorFunctions';\nimport { Validators } from './types';\n\nconst defaultValidators: Validators = {\n  isValidApiVersion: KubernetesValidatorFunctions.isValidApiVersion,\n  isValidKind: KubernetesValidatorFunctions.isValidKind,\n  isValidEntityName: KubernetesValidatorFunctions.isValidObjectName,\n  isValidNamespace: KubernetesValidatorFunctions.isValidNamespace,\n  isValidLabelKey: KubernetesValidatorFunctions.isValidLabelKey,\n  isValidLabelValue: KubernetesValidatorFunctions.isValidLabelValue,\n  isValidAnnotationKey: KubernetesValidatorFunctions.isValidAnnotationKey,\n  isValidAnnotationValue: KubernetesValidatorFunctions.isValidAnnotationValue,\n  isValidTag: (value: unknown): boolean => {\n    // NOTE(freben): This one is a bit of an oddball and doesn't fit well anywhere to delegate to, so it's just inlined for now.\n    return (\n      typeof value === 'string' &&\n      value.length >= 1 &&\n      value.length <= 63 &&\n      /^[a-z0-9:+#]+(\\-[a-z0-9:+#]+)*$/.test(value)\n    );\n  },\n};\n\n/**\n * Creates a {@link Validators} object from `overrides`, with default values taken from {@link KubernetesValidatorFunctions}\n *\n * @public\n */\nexport function makeValidator(overrides: Partial<Validators> = {}): Validators {\n  return {\n    ...defaultValidators,\n    ...overrides,\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EntityPolicy } from './types';\nimport {\n  CommonValidatorFunctions,\n  KubernetesValidatorFunctions,\n  makeValidator,\n  Validators,\n} from '../../validation';\nimport { Entity } from '../Entity';\n\n/**\n * Ensures that the format of individual fields of the entity envelope\n * is valid.\n *\n * @remarks\n *\n * This does not take into account machine generated fields such as uid, etag\n * and generation.\n *\n * @public\n */\nexport class FieldFormatEntityPolicy implements EntityPolicy {\n  private readonly validators: Validators;\n\n  constructor(validators: Validators = makeValidator()) {\n    this.validators = validators;\n  }\n\n  async enforce(entity: Entity): Promise<Entity> {\n    function require(\n      field: string,\n      value: any,\n      validator: (value: any) => boolean,\n    ) {\n      if (value === undefined || value === null) {\n        throw new Error(`${field} must have a value`);\n      }\n\n      let isValid: boolean;\n      try {\n        isValid = validator(value);\n      } catch (e) {\n        throw new Error(`${field} could not be validated, ${e}`);\n      }\n\n      if (!isValid) {\n        let expectation;\n        switch (\n          validator.name as\n            | keyof typeof KubernetesValidatorFunctions\n            | keyof typeof CommonValidatorFunctions\n        ) {\n          case 'isValidLabelValue':\n          case 'isValidObjectName':\n            expectation =\n              'a string that is sequences of [a-zA-Z0-9] separated by any of [-_.], at most 63 characters in total';\n            break;\n          case 'isValidLabelKey':\n          case 'isValidApiVersion':\n          case 'isValidAnnotationKey':\n            expectation = 'a valid prefix and/or suffix';\n            break;\n          case 'isValidNamespace':\n          case 'isValidDnsLabel':\n            expectation =\n              'a string that is sequences of [a-z0-9] separated by [-], at most 63 characters in total';\n            break;\n          case 'isValidTag':\n            expectation =\n              'a string that is sequences of [a-z0-9+#] separated by [-], at most 63 characters in total';\n            break;\n          case 'isValidAnnotationValue':\n            expectation = 'a string';\n            break;\n          case 'isValidKind':\n            expectation =\n              'a string that is a sequence of [a-zA-Z][a-z0-9A-Z], at most 63 characters in total';\n            break;\n          case 'isValidUrl':\n            expectation = 'a string that is a valid url';\n            break;\n          case 'isValidString':\n          case 'isNonEmptyString':\n            expectation = 'a non empty string';\n            break;\n          default:\n            expectation = undefined;\n            break;\n        }\n\n        // ensure that if there are other/future validators, the error message defaults to a general \"is not valid, visit link\"\n        const message = expectation\n          ? ` expected ${expectation} but found \"${value}\".`\n          : '';\n\n        throw new Error(\n          `\"${field}\" is not valid;${message} To learn more about catalog file format, visit: https://github.com/backstage/backstage/blob/master/docs/architecture-decisions/adr002-default-catalog-file-format.md`,\n        );\n      }\n    }\n\n    function optional(\n      field: string,\n      value: any,\n      validator: (value: any) => boolean,\n    ) {\n      return value === undefined || require(field, value, validator);\n    }\n\n    require('apiVersion', entity.apiVersion, this.validators.isValidApiVersion);\n    require('kind', entity.kind, this.validators.isValidKind);\n\n    require('metadata.name', entity.metadata.name, this.validators\n      .isValidEntityName);\n    optional(\n      'metadata.namespace',\n      entity.metadata.namespace,\n      this.validators.isValidNamespace,\n    );\n\n    for (const [k, v] of Object.entries(entity.metadata.labels ?? [])) {\n      require(`labels.${k}`, k, this.validators.isValidLabelKey);\n      require(`labels.${k}`, v, this.validators.isValidLabelValue);\n    }\n\n    for (const [k, v] of Object.entries(entity.metadata.annotations ?? [])) {\n      require(`annotations.${k}`, k, this.validators.isValidAnnotationKey);\n      require(`annotations.${k}`, v, this.validators.isValidAnnotationValue);\n    }\n\n    const tags = entity.metadata.tags ?? [];\n\n    for (let i = 0; i < tags.length; ++i) {\n      require(`tags.${i}`, tags[i], this.validators.isValidTag);\n    }\n\n    const links = entity.metadata.links ?? [];\n\n    for (let i = 0; i < links.length; ++i) {\n      require(`links.${i}.url`, links[i]\n        ?.url, CommonValidatorFunctions.isValidUrl);\n      optional(\n        `links.${i}.title`,\n        links[i]?.title,\n        CommonValidatorFunctions.isNonEmptyString,\n      );\n      optional(\n        `links.${i}.icon`,\n        links[i]?.icon,\n        KubernetesValidatorFunctions.isValidObjectName,\n      );\n    }\n\n    return entity;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EntityPolicy } from './types';\nimport { Entity } from '../Entity';\n\nconst defaultKnownFields = ['apiVersion', 'kind', 'metadata', 'spec'];\n\n/**\n * Ensures that there are no foreign root fields in the entity.\n *\n * @public\n */\nexport class NoForeignRootFieldsEntityPolicy implements EntityPolicy {\n  private readonly knownFields: string[];\n\n  constructor(knownFields: string[] = defaultKnownFields) {\n    this.knownFields = knownFields;\n  }\n\n  async enforce(entity: Entity): Promise<Entity> {\n    for (const field of Object.keys(entity)) {\n      if (!this.knownFields.includes(field)) {\n        throw new Error(`Unknown field ${field}`);\n      }\n    }\n    return entity;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Ajv, { ValidateFunction } from 'ajv';\nimport entitySchema from '../../schema/Entity.schema.json';\nimport entityMetaSchema from '../../schema/EntityMeta.schema.json';\nimport commonSchema from '../../schema/shared/common.schema.json';\nimport { Entity } from '../Entity';\nimport { EntityPolicy } from './types';\n\n/**\n * Ensures that the entity spec is valid according to a schema.\n *\n * @remarks\n *\n * This should be the first policy in the list, to ensure that other downstream\n * policies can work with a structure that is at least valid in therms of the\n * typescript type.\n *\n * @public\n */\nexport class SchemaValidEntityPolicy implements EntityPolicy {\n  private validate: ValidateFunction<Entity> | undefined;\n\n  async enforce(entity: Entity): Promise<Entity> {\n    if (!this.validate) {\n      const ajv = new Ajv({ allowUnionTypes: true });\n      this.validate = ajv\n        .addSchema([commonSchema, entityMetaSchema], undefined, undefined, true)\n        .compile<Entity>(entitySchema);\n    }\n\n    const result = this.validate(entity);\n    if (result === true) {\n      return entity;\n    }\n\n    const [error] = this.validate.errors || [];\n    if (!error) {\n      throw new Error(`Malformed envelope, Unknown error`);\n    }\n\n    throw new Error(\n      `Malformed envelope, ${error.dataPath || '<root>'} ${error.message}`,\n    );\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_NAMESPACE } from './constants';\nimport { CompoundEntityRef } from '../types';\nimport { Entity } from './Entity';\n\nfunction parseRefString(ref: string): {\n  kind?: string;\n  namespace?: string;\n  name: string;\n} {\n  let colonI = ref.indexOf(':');\n  const slashI = ref.indexOf('/');\n\n  // If the / is ahead of the :, treat the rest as the name\n  if (slashI !== -1 && slashI < colonI) {\n    colonI = -1;\n  }\n\n  const kind = colonI === -1 ? undefined : ref.slice(0, colonI);\n  const namespace = slashI === -1 ? undefined : ref.slice(colonI + 1, slashI);\n  const name = ref.slice(Math.max(colonI + 1, slashI + 1));\n\n  if (kind === '' || namespace === '' || name === '') {\n    throw new TypeError(\n      `Entity reference \"${ref}\" was not on the form [<kind>:][<namespace>/]<name>`,\n    );\n  }\n\n  return { kind, namespace, name };\n}\n\n/**\n * Extracts the kind, namespace and name that form the compound entity ref\n * triplet of the given entity.\n *\n * @public\n * @deprecated Use getCompoundEntityRef instead\n * @param entity - An entity\n * @returns The compound entity ref\n */\nexport const getEntityName = getCompoundEntityRef;\n\n/**\n * Extracts the kind, namespace and name that form the compound entity ref\n * triplet of the given entity.\n *\n * @public\n * @param entity - An entity\n * @returns The compound entity ref\n */\nexport function getCompoundEntityRef(entity: Entity): CompoundEntityRef {\n  return {\n    kind: entity.kind,\n    namespace: entity.metadata.namespace || DEFAULT_NAMESPACE,\n    name: entity.metadata.name,\n  };\n}\n\n/**\n * Parses an entity reference, either on string or compound form, and returns\n * a structure with a name, and optional kind and namespace.\n *\n * @remarks\n *\n * The context object can contain default values for the kind and namespace,\n * that will be used if the input reference did not specify any.\n *\n * @public\n * @param ref - The reference to parse\n * @param context - The context of defaults that the parsing happens within\n * @returns The compound form of the reference\n */\nexport function parseEntityRef(\n  ref: string | { kind?: string; namespace?: string; name: string },\n  context?: {\n    /** The default kind, if none is given in the reference */\n    defaultKind?: string;\n    /** The default namespace, if none is given in the reference */\n    defaultNamespace?: string;\n  },\n): CompoundEntityRef {\n  if (!ref) {\n    throw new Error(`Entity reference must not be empty`);\n  }\n\n  const defaultKind = context?.defaultKind;\n  const defaultNamespace = context?.defaultNamespace || DEFAULT_NAMESPACE;\n\n  let kind: string | undefined;\n  let namespace: string | undefined;\n  let name: string | undefined;\n\n  if (typeof ref === 'string') {\n    const parsed = parseRefString(ref);\n    kind = parsed.kind ?? defaultKind;\n    namespace = parsed.namespace ?? defaultNamespace;\n    name = parsed.name;\n  } else {\n    kind = ref.kind ?? defaultKind;\n    namespace = ref.namespace ?? defaultNamespace;\n    name = ref.name;\n  }\n\n  if (!kind) {\n    const textual = JSON.stringify(ref);\n    throw new Error(\n      `Entity reference ${textual} had missing or empty kind (e.g. did not start with \"component:\" or similar)`,\n    );\n  } else if (!namespace) {\n    const textual = JSON.stringify(ref);\n    throw new Error(\n      `Entity reference ${textual} had missing or empty namespace`,\n    );\n  } else if (!name) {\n    const textual = JSON.stringify(ref);\n    throw new Error(`Entity reference ${textual} had missing or empty name`);\n  }\n\n  return { kind, namespace, name };\n}\n\n/**\n * Takes an entity or entity name/reference, and returns the string form of an\n * entity ref.\n *\n * @remarks\n *\n * This function creates a canonical and unique reference to the entity, converting\n * all parts of the name to lowercase and inserts the default namespace if needed.\n * It is typically not the best way to represent the entity reference to the user.\n *\n * @public\n * @param ref - The reference to serialize\n * @returns The same reference on either string or compound form\n */\nexport function stringifyEntityRef(\n  ref: Entity | { kind: string; namespace?: string; name: string },\n): string {\n  let kind;\n  let namespace;\n  let name;\n\n  if ('metadata' in ref) {\n    kind = ref.kind;\n    namespace = ref.metadata.namespace ?? DEFAULT_NAMESPACE;\n    name = ref.metadata.name;\n  } else {\n    kind = ref.kind;\n    namespace = ref.namespace ?? DEFAULT_NAMESPACE;\n    name = ref.name;\n  }\n\n  return `${kind.toLocaleLowerCase('en-US')}:${namespace.toLocaleLowerCase(\n    'en-US',\n  )}/${name.toLocaleLowerCase('en-US')}`;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, EntityPolicy } from './entity';\n\n// Helper that requires that all of a set of policies can be successfully\n// applied\nclass AllEntityPolicies implements EntityPolicy {\n  constructor(private readonly policies: EntityPolicy[]) {}\n\n  async enforce(entity: Entity): Promise<Entity> {\n    let result = entity;\n    for (const policy of this.policies) {\n      const output = await policy.enforce(result);\n      if (!output) {\n        throw new Error(\n          `Policy ${policy.constructor.name} did not return a result`,\n        );\n      }\n      result = output;\n    }\n    return result;\n  }\n}\n\n// Helper that requires that at least one of a set of policies can be\n// successfully applied\nclass AnyEntityPolicy implements EntityPolicy {\n  constructor(private readonly policies: EntityPolicy[]) {}\n\n  async enforce(entity: Entity): Promise<Entity> {\n    for (const policy of this.policies) {\n      const output = await policy.enforce(entity);\n      if (output) {\n        return output;\n      }\n    }\n    throw new Error(`The entity did not match any known policy`);\n  }\n}\n\n/**\n * Provides helpers for enforcing a set of {@link EntityPolicy} in an `and`/`or` expression.\n *\n * @public\n */\nexport const EntityPolicies = {\n  allOf(policies: EntityPolicy[]): EntityPolicy {\n    return new AllEntityPolicies(policies);\n  },\n  oneOf(policies: EntityPolicy[]): EntityPolicy {\n    return new AnyEntityPolicy(policies);\n  },\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { entityKindSchemaValidator } from '../validation';\nimport { KindValidator } from './types';\n\n// TODO(freben): Left here as a compatibility helper. It would be nicer to\n// just export the inner validator directly. However, all of the already\n// exported kind validators have the `KindValidator` signature which is\n// different. So let's postpone that change until a later time.\nexport function ajvCompiledJsonSchemaValidator(schema: unknown): KindValidator {\n  const validator = entityKindSchemaValidator(schema);\n  return {\n    async check(data) {\n      return validator(data) === data;\n    },\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Entity } from '../entity/Entity';\nimport schema from '../schema/kinds/API.v1alpha1.schema.json';\nimport { ajvCompiledJsonSchemaValidator } from './util';\n\n/**\n * Backstage API kind Entity. APIs describe the interfaces for Components to communicate.\n *\n * @remarks\n *\n * See {@link https://backstage.io/docs/features/software-catalog/system-model}\n *\n * @public\n */\nexport interface ApiEntityV1alpha1 extends Entity {\n  apiVersion: 'backstage.io/v1alpha1' | 'backstage.io/v1beta1';\n  kind: 'API';\n  spec: {\n    type: string;\n    lifecycle: string;\n    owner: string;\n    definition: string;\n    system?: string;\n  };\n}\n\n/**\n * {@link KindValidator} for {@link ApiEntityV1alpha1}.\n *\n * @public\n */\nexport const apiEntityV1alpha1Validator =\n  ajvCompiledJsonSchemaValidator(schema);\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Entity } from '../entity/Entity';\nimport schema from '../schema/kinds/Component.v1alpha1.schema.json';\nimport { ajvCompiledJsonSchemaValidator } from './util';\n\n/**\n * Backstage catalog Component kind Entity. Represents a single, individual piece of software.\n *\n * @remarks\n *\n * See {@link https://backstage.io/docs/features/software-catalog/system-model}\n *\n * @public\n */\nexport interface ComponentEntityV1alpha1 extends Entity {\n  apiVersion: 'backstage.io/v1alpha1' | 'backstage.io/v1beta1';\n  kind: 'Component';\n  spec: {\n    type: string;\n    lifecycle: string;\n    owner: string;\n    subcomponentOf?: string;\n    providesApis?: string[];\n    consumesApis?: string[];\n    dependsOn?: string[];\n    system?: string;\n  };\n}\n\n/**\n * {@link KindValidator} for {@link ComponentEntityV1alpha1}.\n *\n * @public\n */\nexport const componentEntityV1alpha1Validator =\n  ajvCompiledJsonSchemaValidator(schema);\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Entity } from '../entity/Entity';\nimport schema from '../schema/kinds/Domain.v1alpha1.schema.json';\nimport { ajvCompiledJsonSchemaValidator } from './util';\n\n/**\n * Backstage Domain kind Entity. Domains group Systems together.\n *\n * @remarks\n *\n * See {@link https://backstage.io/docs/features/software-catalog/system-model}\n *\n * @public\n */\nexport interface DomainEntityV1alpha1 extends Entity {\n  apiVersion: 'backstage.io/v1alpha1' | 'backstage.io/v1beta1';\n  kind: 'Domain';\n  spec: {\n    owner: string;\n  };\n}\n\n/**\n * {@link KindValidator} for {@link DomainEntityV1alpha1}.\n *\n * @public\n */\nexport const domainEntityV1alpha1Validator =\n  ajvCompiledJsonSchemaValidator(schema);\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Entity } from '../entity/Entity';\nimport schema from '../schema/kinds/Group.v1alpha1.schema.json';\nimport { ajvCompiledJsonSchemaValidator } from './util';\n\n/**\n * Backstage catalog Group kind Entity.\n *\n * @public\n */\nexport interface GroupEntityV1alpha1 extends Entity {\n  apiVersion: 'backstage.io/v1alpha1' | 'backstage.io/v1beta1';\n  kind: 'Group';\n  spec: {\n    type: string;\n    profile?: {\n      displayName?: string;\n      email?: string;\n      picture?: string;\n    };\n    parent?: string;\n    children: string[];\n    members?: string[];\n  };\n}\n\n/**\n * {@link KindValidator} for {@link GroupEntityV1alpha1}.\n * @public\n */\nexport const groupEntityV1alpha1Validator =\n  ajvCompiledJsonSchemaValidator(schema);\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Entity } from '../entity/Entity';\nimport schema from '../schema/kinds/Location.v1alpha1.schema.json';\nimport { ajvCompiledJsonSchemaValidator } from './util';\n\n/**\n * Backstage catalog Location kind Entity.\n *\n * @public\n */\nexport interface LocationEntityV1alpha1 extends Entity {\n  apiVersion: 'backstage.io/v1alpha1' | 'backstage.io/v1beta1';\n  kind: 'Location';\n  spec: {\n    type?: string;\n    target?: string;\n    targets?: string[];\n    presence?: 'required' | 'optional';\n  };\n}\n\n/**\n * {@link KindValidator} for {@link LocationEntityV1alpha1}.\n *\n * @public\n */\nexport const locationEntityV1alpha1Validator =\n  ajvCompiledJsonSchemaValidator(schema);\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\nNaming rules for relations in priority order:\n\n1. Use at most two words. One main verb and a specifier, e.g. \"ownerOf\"\n2. Reading out \"<source-kind> <type> <target-kind>\" should make sense in English.\n3. Maintain symmetry between pairs, e.g. \"ownedBy\" and \"ownerOf\" rather than \"owns\".\n*/\n\n/**\n * An ownership relation where the owner is usually an organizational\n * entity (user or group), and the other entity can be anything. Reversed\n * direction of {@link RELATION_OWNER_OF}.\n *\n * @public\n */\nexport const RELATION_OWNED_BY = 'ownedBy';\n\n/**\n * A relationship from an owner to the owned entity. Reversed direction of\n * {@link RELATION_OWNED_BY}.\n *\n * @public\n */\nexport const RELATION_OWNER_OF = 'ownerOf';\n\n/**\n * A relation with an API entity, typically from a component. Reversed direction of\n * {@link RELATION_API_CONSUMED_BY}.\n *\n * @public\n */\nexport const RELATION_CONSUMES_API = 'consumesApi';\n\n/**\n * A relation of an API being consumed, typically by a component. Reversed direction of\n * {@link RELATION_CONSUMES_API}.\n *\n * @public\n */\nexport const RELATION_API_CONSUMED_BY = 'apiConsumedBy';\n\n/**\n * A relation from an API provider entity (typically a component) to the API. Reversed direction of\n * {@link RELATION_API_PROVIDED_BY}.\n *\n * @public\n */\nexport const RELATION_PROVIDES_API = 'providesApi';\n\n/**\n * A relation from an API to its provider entity (typically a component). Reversed direction of\n * {@link RELATION_PROVIDES_API}.\n *\n * @public\n */\nexport const RELATION_API_PROVIDED_BY = 'apiProvidedBy';\n\n/**\n * A relation denoting a dependency on another entity. Reversed direction of\n * {@link RELATION_DEPENDENCY_OF}.\n *\n * @public\n */\nexport const RELATION_DEPENDS_ON = 'dependsOn';\n\n/**\n * A relation denoting a reverse dependency by another entity. Reversed direction of\n * {@link RELATION_DEPENDS_ON}.\n *\n * @public\n */\nexport const RELATION_DEPENDENCY_OF = 'dependencyOf';\n\n/**\n * A parent/child relation to build up a tree, used for example to describe\n * the organizational structure between groups. Reversed direction of\n * {@link RELATION_CHILD_OF}.\n *\n * @public\n */\nexport const RELATION_PARENT_OF = 'parentOf';\n\n/**\n * A relation from a child to a parent entity, used for example to describe\n * the organizational structure between groups. Reversed direction of\n * {@link RELATION_PARENT_OF}.\n *\n * @public\n */\nexport const RELATION_CHILD_OF = 'childOf';\n\n/**\n * A membership relation, typically for users in a group. Reversed direction of\n * {@link RELATION_HAS_MEMBER}.\n *\n * @public\n */\nexport const RELATION_MEMBER_OF = 'memberOf';\n\n/**\n * A relation from a group to its member, typcally a user in a group. Reversed direction of\n * {@link RELATION_MEMBER_OF}.\n *\n * @public\n */\nexport const RELATION_HAS_MEMBER = 'hasMember';\n\n/**\n * A part/whole relation, typically for components in a system and systems\n * in a domain. Reversed direction of {@link RELATION_HAS_PART}.\n *\n * @public\n */\nexport const RELATION_PART_OF = 'partOf';\n\n/**\n * A relation from a containing entity to a contained entity. Reversed direction of\n * {@link RELATION_PART_OF}.\n *\n * @public\n */\nexport const RELATION_HAS_PART = 'hasPart';\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Entity } from '../entity/Entity';\nimport schema from '../schema/kinds/Resource.v1alpha1.schema.json';\nimport { ajvCompiledJsonSchemaValidator } from './util';\n\n/**\n * Backstage catalog Resource kind Entity. Represents infrastructure required to operate Components.\n *\n * @remarks\n *\n * See {@link https://backstage.io/docs/features/software-catalog/system-model}\n *\n * @public\n */\nexport interface ResourceEntityV1alpha1 extends Entity {\n  apiVersion: 'backstage.io/v1alpha1' | 'backstage.io/v1beta1';\n  kind: 'Resource';\n  spec: {\n    type: string;\n    owner: string;\n    dependsOn?: string[];\n    dependencyOf?: string[];\n    system?: string;\n  };\n}\n\n/**\n * {@link KindValidator} for {@link ResourceEntityV1alpha1}.\n *\n * @public\n */\nexport const resourceEntityV1alpha1Validator =\n  ajvCompiledJsonSchemaValidator(schema);\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Entity } from '../entity/Entity';\nimport schema from '../schema/kinds/System.v1alpha1.schema.json';\nimport { ajvCompiledJsonSchemaValidator } from './util';\n\n/**\n * Backstage catalog System kind Entity. Systems group Comopnents, Resources and APIs together.\n *\n * @remarks\n *\n * See {@link https://backstage.io/docs/features/software-catalog/system-model}\n *\n * @public\n */\nexport interface SystemEntityV1alpha1 extends Entity {\n  apiVersion: 'backstage.io/v1alpha1' | 'backstage.io/v1beta1';\n  kind: 'System';\n  spec: {\n    owner: string;\n    domain?: string;\n  };\n}\n\n/**\n * {@link KindValidator} for {@link SystemEntityV1alpha1}.\n *\n * @public\n */\nexport const systemEntityV1alpha1Validator =\n  ajvCompiledJsonSchemaValidator(schema);\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Entity } from '../entity/Entity';\nimport schema from '../schema/kinds/User.v1alpha1.schema.json';\nimport { ajvCompiledJsonSchemaValidator } from './util';\n\n/**\n * Backstage catalog User kind Entity.\n *\n * @public\n */\nexport interface UserEntityV1alpha1 extends Entity {\n  apiVersion: 'backstage.io/v1alpha1' | 'backstage.io/v1beta1';\n  kind: 'User';\n  spec: {\n    profile?: {\n      displayName?: string;\n      email?: string;\n      picture?: string;\n    };\n    memberOf: string[];\n  };\n}\n\n/**\n * {@link KindValidator} for {@link UserEntityV1alpha1}.\n *\n * @public\n */\nexport const userEntityV1alpha1Validator =\n  ajvCompiledJsonSchemaValidator(schema);\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Entity annotation containing the location from which the entity is sourced.\n *\n * @public\n */\nexport const ANNOTATION_LOCATION = 'backstage.io/managed-by-location';\n\n/**\n * Entity annotation containing the originally sourced location which ultimately\n * led to this entity being ingested.\n *\n * @public\n */\nexport const ANNOTATION_ORIGIN_LOCATION =\n  'backstage.io/managed-by-origin-location';\n\n/**\n * Entity annotation pointing to the source (e.g. source code repository root or\n * similar) for this entity.\n *\n * @public\n */\nexport const ANNOTATION_SOURCE_LOCATION = 'backstage.io/source-location';\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ANNOTATION_SOURCE_LOCATION } from '.';\nimport { Entity, stringifyEntityRef } from '../entity';\nimport { ANNOTATION_LOCATION } from './annotation';\n\n/**\n * Parses a string form location reference.\n *\n * @public\n * @param ref - A string-form location ref, e.g. `'url:https://host'`\n * @returns A location ref, e.g. `{ type: 'url', target: 'https://host' }`\n */\nexport function parseLocationRef(ref: string): {\n  type: string;\n  target: string;\n} {\n  if (typeof ref !== 'string') {\n    throw new TypeError(\n      `Unable to parse location ref '${ref}', unexpected argument ${typeof ref}`,\n    );\n  }\n\n  const splitIndex = ref.indexOf(':');\n  if (splitIndex < 0) {\n    throw new TypeError(\n      `Unable to parse location ref '${ref}', expected '<type>:<target>', e.g. 'url:https://host/path'`,\n    );\n  }\n\n  const type = ref.substring(0, splitIndex).trim();\n  const target = ref.substring(splitIndex + 1).trim();\n\n  if (!type || !target) {\n    throw new TypeError(\n      `Unable to parse location ref '${ref}', expected '<type>:<target>', e.g. 'url:https://host/path'`,\n    );\n  }\n\n  if (type === 'http' || type === 'https') {\n    throw new TypeError(\n      `Invalid location ref '${ref}', please prefix it with 'url:', e.g. 'url:${ref}'`,\n    );\n  }\n\n  return { type, target };\n}\n\n/**\n * Turns a location ref into its string form.\n *\n * @public\n * @param ref - A location ref, e.g. `{ type: 'url', target: 'https://host' }`\n * @returns A string-form location ref, e.g. `'url:https://host'`\n */\nexport function stringifyLocationRef(ref: {\n  type: string;\n  target: string;\n}): string {\n  const { type, target } = ref;\n\n  if (!type) {\n    throw new TypeError(`Unable to stringify location ref, empty type`);\n  } else if (!target) {\n    throw new TypeError(`Unable to stringify location ref, empty target`);\n  }\n\n  return `${type}:${target}`;\n}\n\n/**\n * Returns the source code location of the Entity, to the extent that one exists.\n *\n * @remarks\n *\n * If the returned location type is of type 'url', the target should be readable at least\n * using the UrlReader from `@backstage/backend-common`. If it is not of type 'url', the caller\n * needs to have explicit handling of each location type or signal that it is not supported.\n *\n * @public\n */\nexport function getEntitySourceLocation(entity: Entity): {\n  type: string;\n  target: string;\n} {\n  const locationRef =\n    entity.metadata?.annotations?.[ANNOTATION_SOURCE_LOCATION] ??\n    entity.metadata?.annotations?.[ANNOTATION_LOCATION];\n\n  if (!locationRef) {\n    throw new Error(\n      `Entity '${stringifyEntityRef(entity)}' is missing location`,\n    );\n  }\n\n  return parseLocationRef(locationRef);\n}\n"],"names":["schema"],"mappings":"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"}
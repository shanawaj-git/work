import { createReactExtension, useApp, createRouteRef, createPlugin, createRoutableExtension, createComponentExtension } from '@backstage/core-plugin-api';
import React, { Suspense } from 'react';
import { Dialog, DialogTitle, DialogContent, DialogActions, Button, IconButton } from '@material-ui/core';
import SettingsIcon from '@material-ui/icons/Settings';
import { HeaderLabel, InfoCard } from '@backstage/core-components';
import 'react-router';

const SettingsModal = ({
  open,
  close,
  componentName,
  children
}) => {
  return /* @__PURE__ */ React.createElement(Dialog, {
    open,
    onClose: () => close()
  }, /* @__PURE__ */ React.createElement(DialogTitle, null, "Settings - ", componentName), /* @__PURE__ */ React.createElement(DialogContent, null, children), /* @__PURE__ */ React.createElement(DialogActions, null, /* @__PURE__ */ React.createElement(Button, {
    onClick: () => close(),
    color: "primary",
    variant: "contained"
  }, "Close")));
};

const timeFormat = {
  hour: "2-digit",
  minute: "2-digit"
};
function getTimes(clockConfigs) {
  const d = new Date();
  const lang = window.navigator.language;
  const clocks = [];
  if (!clockConfigs) {
    return clocks;
  }
  for (const clockConfig of clockConfigs) {
    let label = clockConfig.label;
    const options = {
      timeZone: clockConfig.timeZone,
      ...timeFormat
    };
    try {
      new Date().toLocaleString(lang, options);
    } catch (e) {
      console.warn(`The timezone ${options.timeZone} is invalid. Defaulting to GMT`);
      options.timeZone = "GMT";
      label = "GMT";
    }
    const time = d.toLocaleTimeString(lang, options);
    clocks.push({ time, label });
  }
  return clocks;
}
const HeaderWorldClock = ({
  clockConfigs
}) => {
  const defaultTimes = [];
  const [clocks, setTimes] = React.useState(defaultTimes);
  React.useEffect(() => {
    setTimes(getTimes(clockConfigs));
    const intervalId = setInterval(() => {
      setTimes(getTimes(clockConfigs));
    }, 1e3);
    return () => {
      clearInterval(intervalId);
    };
  }, [clockConfigs]);
  if (clocks.length !== 0) {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, clocks.map((clock) => /* @__PURE__ */ React.createElement(HeaderLabel, {
      label: clock.label,
      value: clock.time,
      key: clock.label
    })));
  }
  return null;
};

function createCardExtension({
  title,
  components,
  name
}) {
  return createReactExtension({
    name,
    component: {
      lazy: () => components().then(({ Content, Actions, Settings, ContextProvider }) => {
        const CardExtension = (props) => {
          const { Renderer, title: overrideTitle, ...childProps } = props;
          const app = useApp();
          const { Progress } = app.getComponents();
          const [settingsOpen, setSettingsOpen] = React.useState(false);
          if (Renderer) {
            return /* @__PURE__ */ React.createElement(Suspense, {
              fallback: /* @__PURE__ */ React.createElement(Progress, null)
            }, /* @__PURE__ */ React.createElement(Renderer, {
              title: overrideTitle || title,
              ...{
                Content,
                ...Actions ? { Actions } : {},
                ...Settings ? { Settings } : {},
                ...ContextProvider ? { ContextProvider } : {},
                ...childProps
              }
            }));
          }
          const cardProps = {
            title: overrideTitle != null ? overrideTitle : title,
            ...Settings ? {
              action: /* @__PURE__ */ React.createElement(IconButton, {
                onClick: () => setSettingsOpen(true)
              }, /* @__PURE__ */ React.createElement(SettingsIcon, null, "Settings"))
            } : {},
            ...Actions ? {
              actions: /* @__PURE__ */ React.createElement(Actions, null)
            } : {}
          };
          const innerContent = /* @__PURE__ */ React.createElement(InfoCard, {
            ...cardProps
          }, Settings && /* @__PURE__ */ React.createElement(SettingsModal, {
            open: settingsOpen,
            componentName: title,
            close: () => setSettingsOpen(false)
          }, /* @__PURE__ */ React.createElement(Settings, null)), /* @__PURE__ */ React.createElement(Content, {
            ...childProps
          }));
          return /* @__PURE__ */ React.createElement(Suspense, {
            fallback: /* @__PURE__ */ React.createElement(Progress, null)
          }, ContextProvider ? /* @__PURE__ */ React.createElement(ContextProvider, {
            ...childProps
          }, innerContent) : innerContent);
        };
        return CardExtension;
      })
    }
  });
}

const rootRouteRef = createRouteRef({
  id: "home"
});

const homePlugin = createPlugin({
  id: "home",
  routes: {
    root: rootRouteRef
  }
});
const HomepageCompositionRoot = homePlugin.provide(createRoutableExtension({
  name: "HomepageCompositionRoot",
  component: () => import('./esm/index-539ef173.esm.js').then((m) => m.HomepageCompositionRoot),
  mountPoint: rootRouteRef
}));
const ComponentAccordion = homePlugin.provide(createComponentExtension({
  name: "ComponentAccordion",
  component: {
    lazy: () => import('./esm/index-d8d6d705.esm.js').then((m) => m.ComponentAccordion)
  }
}));
const ComponentTabs = homePlugin.provide(createComponentExtension({
  name: "ComponentTabs",
  component: {
    lazy: () => import('./esm/index-d8d6d705.esm.js').then((m) => m.ComponentTabs)
  }
}));
const ComponentTab = homePlugin.provide(createComponentExtension({
  name: "ComponentTab",
  component: {
    lazy: () => import('./esm/index-d8d6d705.esm.js').then((m) => m.ComponentTab)
  }
}));
const WelcomeTitle = homePlugin.provide(createComponentExtension({
  name: "WelcomeTitle",
  component: {
    lazy: () => import('./esm/index-f1d655aa.esm.js').then((m) => m.WelcomeTitle)
  }
}));
const HomePageCompanyLogo = homePlugin.provide(createComponentExtension({
  name: "CompanyLogo",
  component: {
    lazy: () => import('./esm/index-0caca094.esm.js').then((m) => m.CompanyLogo)
  }
}));
const HomePageRandomJoke = homePlugin.provide(createCardExtension({
  name: "HomePageRandomJoke",
  title: "Random Joke",
  components: () => import('./esm/index-97d987f3.esm.js')
}));
const HomePageToolkit = homePlugin.provide(createCardExtension({
  name: "HomePageToolkit",
  title: "Toolkit",
  components: () => import('./esm/index-bc3d603a.esm.js')
}));
const HomePageStarredEntities = homePlugin.provide(createCardExtension({
  name: "HomePageStarredEntities",
  title: "Your Starred Entities",
  components: () => import('./esm/index-de145e83.esm.js')
}));

export { ComponentAccordion, ComponentTab, ComponentTabs, HeaderWorldClock, HomePageCompanyLogo, HomePageRandomJoke, HomePageStarredEntities, HomePageToolkit, HomepageCompositionRoot, SettingsModal, WelcomeTitle, createCardExtension, homePlugin };
//# sourceMappingURL=index.esm.js.map

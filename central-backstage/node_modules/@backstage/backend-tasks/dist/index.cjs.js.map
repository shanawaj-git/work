{"version":3,"file":"index.cjs.js","sources":["../src/database/tables.ts","../src/database/migrateBackendTasks.ts","../src/tasks/types.ts","../src/tasks/util.ts","../src/tasks/TaskWorker.ts","../src/tasks/PluginTaskSchedulerImpl.ts","../src/tasks/PluginTaskSchedulerJanitor.ts","../src/tasks/TaskScheduler.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DB_MIGRATIONS_TABLE = 'backstage_backend_tasks__knex_migrations';\nexport const DB_TASKS_TABLE = 'backstage_backend_tasks__tasks';\n\nexport type DbTasksRow = {\n  id: string;\n  settings_json: string;\n  next_run_start_at: Date;\n  current_run_ticket?: string;\n  current_run_started_at?: Date | string;\n  current_run_expires_at?: Date | string;\n};\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { resolvePackagePath } from '@backstage/backend-common';\nimport { Knex } from 'knex';\nimport { DB_MIGRATIONS_TABLE } from './tables';\n\nconst migrationsDir = resolvePackagePath(\n  '@backstage/backend-tasks',\n  'migrations',\n);\n\nexport async function migrateBackendTasks(knex: Knex): Promise<void> {\n  await knex.migrate.latest({\n    directory: migrationsDir,\n    tableName: DB_MIGRATIONS_TABLE,\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Duration } from 'luxon';\nimport { AbortSignal } from 'node-abort-controller';\nimport { z } from 'zod';\nimport { CronTime } from 'cron';\n\n/**\n * A function that can be called as a scheduled task.\n *\n * It may optionally accept an abort signal argument. When the signal triggers,\n * processing should abort and return as quickly as possible.\n *\n * @public\n */\nexport type TaskFunction =\n  | ((abortSignal: AbortSignal) => void | Promise<void>)\n  | (() => void | Promise<void>);\n\n/**\n * Options that control the scheduling of a task.\n *\n * @public\n */\nexport interface TaskScheduleDefinition {\n  /**\n   * How often you want the task to run. The system does its best to avoid\n   * overlapping invocations.\n   *\n   * This is a best effort value; under some circumstances there can be\n   * deviations. For example, if the task runtime is longer than the frequency\n   * and the timeout has not been given or not been exceeded yet, the next\n   * invocation of this task will be delayed until after the previous one\n   * finishes.\n   *\n   * This is a required field.\n   */\n  frequency:\n    | {\n        /**\n         * A crontab style string.\n         *\n         * Overview:\n         *\n         * ```\n         *   ┌────────────── second (optional)\n         *   │ ┌──────────── minute\n         *   │ │ ┌────────── hour\n         *   │ │ │ ┌──────── day of month\n         *   │ │ │ │ ┌────── month\n         *   │ │ │ │ │ ┌──── day of week\n         *   │ │ │ │ │ │\n         *   │ │ │ │ │ │\n         *   * * * * * *\n         * ```\n         */\n        cron: string;\n      }\n    | Duration;\n\n  /**\n   * The maximum amount of time that a single task invocation can take, before\n   * it's considered timed out and gets \"released\" such that a new invocation\n   * is permitted to take place (possibly, then, on a different worker).\n   */\n  timeout: Duration;\n\n  /**\n   * The amount of time that should pass before the first invocation happens.\n   *\n   * This can be useful in cold start scenarios to stagger or delay some heavy\n   * compute jobs.\n   *\n   * If no value is given for this field then the first invocation will happen\n   * as soon as possible according to the cadence.\n   */\n  initialDelay?: Duration;\n}\n\n/**\n * Options that apply to the invocation of a given task.\n *\n * @public\n */\nexport interface TaskInvocationDefinition {\n  /**\n   * A unique ID (within the scope of the plugin) for the task.\n   */\n  id: string;\n\n  /**\n   * The actual task function to be invoked regularly.\n   */\n  fn: TaskFunction;\n\n  /**\n   * An abort signal that, when triggered, will stop the recurring execution of\n   * the task.\n   */\n  signal?: AbortSignal;\n}\n\n/**\n * A previously prepared task schedule, ready to be invoked.\n *\n * @public\n */\nexport interface TaskRunner {\n  /**\n   * Takes the schedule and executes an actual task using it.\n   *\n   * @param task - The actual runtime properties of the task\n   */\n  run(task: TaskInvocationDefinition): Promise<void>;\n}\n\n/**\n * Deals with the scheduling of distributed tasks, for a given plugin.\n *\n * @public\n */\nexport interface PluginTaskScheduler {\n  /**\n   * Schedules a task function for coordinated exclusive invocation across\n   * workers. This convenience method performs both the scheduling and\n   * invocation in one go.\n   *\n   * @remarks\n   *\n   * If the task was already scheduled since before by us or by another party,\n   * its options are just overwritten with the given options, and things\n   * continue from there.\n   *\n   * @param task - The task definition\n   */\n  scheduleTask(\n    task: TaskScheduleDefinition & TaskInvocationDefinition,\n  ): Promise<void>;\n\n  /**\n   * Creates a scheduled but dormant recurring task, ready to be launched at a\n   * later time.\n   *\n   * @remarks\n   *\n   * This method is useful for pre-creating a schedule in outer code to be\n   * passed into an inner implementation, such that the outer code controls\n   * scheduling while inner code controls implementation.\n   *\n   * @param schedule - The task schedule\n   */\n  createScheduledTaskRunner(schedule: TaskScheduleDefinition): TaskRunner;\n}\n\nfunction isValidOptionalDurationString(d: string | undefined): boolean {\n  try {\n    return !d || Duration.fromISO(d).isValid;\n  } catch {\n    return false;\n  }\n}\n\nfunction isValidCronFormat(c: string | undefined): boolean {\n  try {\n    if (!c) {\n      return false;\n    }\n    // parse cron format to ensure it's a valid format.\n    // eslint-disable-next-line no-new\n    new CronTime(c);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport const taskSettingsV1Schema = z.object({\n  version: z.literal(1),\n  initialDelayDuration: z\n    .string()\n    .optional()\n    .refine(isValidOptionalDurationString, {\n      message: 'Invalid duration, expecting ISO Period',\n    }),\n  recurringAtMostEveryDuration: z\n    .string()\n    .refine(isValidOptionalDurationString, {\n      message: 'Invalid duration, expecting ISO Period',\n    }),\n  timeoutAfterDuration: z.string().refine(isValidOptionalDurationString, {\n    message: 'Invalid duration, expecting ISO Period',\n  }),\n});\n\n/**\n * The properties that control a scheduled task (version 1).\n */\nexport type TaskSettingsV1 = z.infer<typeof taskSettingsV1Schema>;\n\nexport const taskSettingsV2Schema = z.object({\n  version: z.literal(2),\n  cadence: z\n    .string()\n    .refine(isValidCronFormat, { message: 'Invalid cron' })\n    .or(\n      z.string().refine(isValidOptionalDurationString, {\n        message: 'Invalid duration, expecting ISO Period',\n      }),\n    ),\n  timeoutAfterDuration: z.string().refine(isValidOptionalDurationString, {\n    message: 'Invalid duration, expecting ISO Period',\n  }),\n  initialDelayDuration: z\n    .string()\n    .optional()\n    .refine(isValidOptionalDurationString, {\n      message: 'Invalid duration, expecting ISO Period',\n    }),\n});\n\n/**\n * The properties that control a scheduled task (version 2).\n */\nexport type TaskSettingsV2 = z.infer<typeof taskSettingsV2Schema>;\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport { DateTime, Duration } from 'luxon';\nimport { AbortController, AbortSignal } from 'node-abort-controller';\n\n// Keep the IDs compatible with e.g. Prometheus labels\nexport function validateId(id: string) {\n  if (typeof id !== 'string' || !id.trim()) {\n    throw new InputError(`${id} is not a valid ID, expected non-empty string`);\n  }\n}\n\nexport function dbTime(t: Date | string): DateTime {\n  if (typeof t === 'string') {\n    return DateTime.fromSQL(t);\n  }\n  return DateTime.fromJSDate(t);\n}\n\nexport function nowPlus(duration: Duration | undefined, knex: Knex) {\n  const seconds = duration?.as('seconds') ?? 0;\n  if (!seconds) {\n    return knex.fn.now();\n  }\n  return knex.client.config.client.includes('sqlite3')\n    ? knex.raw(`datetime('now', ?)`, [`${seconds} seconds`])\n    : knex.raw(`now() + interval '${seconds} seconds'`);\n}\n\n/**\n * Sleep for the given duration, but return sooner if the abort signal\n * triggers.\n *\n * @param duration - The amount of time to sleep, at most\n * @param abortSignal - An optional abort signal that short circuits the wait\n */\nexport async function sleep(\n  duration: Duration,\n  abortSignal?: AbortSignal,\n): Promise<void> {\n  if (abortSignal?.aborted) {\n    return;\n  }\n\n  await new Promise<void>(resolve => {\n    let timeoutHandle: NodeJS.Timeout | undefined = undefined;\n\n    const done = () => {\n      if (timeoutHandle) {\n        clearTimeout(timeoutHandle);\n      }\n      abortSignal?.removeEventListener('abort', done);\n      resolve();\n    };\n\n    timeoutHandle = setTimeout(done, duration.as('milliseconds'));\n    abortSignal?.addEventListener('abort', done);\n  });\n}\n\n/**\n * Creates a new AbortController that, in addition to working as a regular\n * standalone controller, also gets aborted if the given parent signal\n * reaches aborted state.\n *\n * @param parent - The \"parent\" signal that can trigger the delegate\n */\nexport function delegateAbortController(parent?: AbortSignal): AbortController {\n  const delegate = new AbortController();\n\n  if (parent) {\n    if (parent.aborted) {\n      delegate.abort();\n    } else {\n      const onParentAborted = () => {\n        delegate.abort();\n      };\n\n      const onChildAborted = () => {\n        parent.removeEventListener('abort', onParentAborted);\n      };\n\n      parent.addEventListener('abort', onParentAborted, { once: true });\n      delegate.signal.addEventListener('abort', onChildAborted, { once: true });\n    }\n  }\n\n  return delegate;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport { DateTime, Duration } from 'luxon';\nimport { AbortSignal } from 'node-abort-controller';\nimport { v4 as uuid } from 'uuid';\nimport { Logger } from 'winston';\nimport { DbTasksRow, DB_TASKS_TABLE } from '../database/tables';\nimport { TaskFunction, TaskSettingsV2, taskSettingsV2Schema } from './types';\nimport { delegateAbortController, nowPlus, sleep } from './util';\nimport { CronTime } from 'cron';\n\nconst WORK_CHECK_FREQUENCY = Duration.fromObject({ seconds: 5 });\n\n/**\n * Performs the actual work of a task.\n *\n * @private\n */\nexport class TaskWorker {\n  private readonly taskId: string;\n  private readonly fn: TaskFunction;\n  private readonly knex: Knex;\n  private readonly logger: Logger;\n\n  constructor(taskId: string, fn: TaskFunction, knex: Knex, logger: Logger) {\n    this.taskId = taskId;\n    this.fn = fn;\n    this.knex = knex;\n    this.logger = logger;\n  }\n\n  async start(settings: TaskSettingsV2, options?: { signal?: AbortSignal }) {\n    try {\n      await this.persistTask(settings);\n    } catch (e) {\n      throw new Error(`Failed to persist task, ${e}`);\n    }\n\n    this.logger.info(\n      `Task worker starting: ${this.taskId}, ${JSON.stringify(settings)}`,\n    );\n\n    (async () => {\n      try {\n        while (!options?.signal?.aborted) {\n          const runResult = await this.runOnce(options?.signal);\n          if (runResult.result === 'abort') {\n            break;\n          }\n\n          await sleep(WORK_CHECK_FREQUENCY, options?.signal);\n        }\n        this.logger.info(`Task worker finished: ${this.taskId}`);\n      } catch (e) {\n        this.logger.warn(`Task worker failed unexpectedly, ${e}`);\n      }\n    })();\n  }\n\n  /**\n   * Makes a single attempt at running the task to completion, if ready.\n   *\n   * @returns The outcome of the attempt\n   */\n  async runOnce(\n    signal?: AbortSignal,\n  ): Promise<\n    | { result: 'not-ready-yet' }\n    | { result: 'abort' }\n    | { result: 'failed' }\n    | { result: 'completed' }\n  > {\n    const findResult = await this.findReadyTask();\n    if (\n      findResult.result === 'not-ready-yet' ||\n      findResult.result === 'abort'\n    ) {\n      return findResult;\n    }\n\n    const taskSettings = findResult.settings;\n    const ticket = uuid();\n\n    const claimed = await this.tryClaimTask(ticket, taskSettings);\n    if (!claimed) {\n      return { result: 'not-ready-yet' };\n    }\n\n    // Abort the task execution either if the worker is stopped, or if the\n    // task timeout is hit\n    const taskAbortController = delegateAbortController(signal);\n    const timeoutHandle = setTimeout(() => {\n      taskAbortController.abort();\n    }, Duration.fromISO(taskSettings.timeoutAfterDuration).as('milliseconds'));\n\n    try {\n      await this.fn(taskAbortController.signal);\n    } catch (e) {\n      await this.tryReleaseTask(ticket, taskSettings);\n      return { result: 'failed' };\n    } finally {\n      clearTimeout(timeoutHandle);\n    }\n\n    await this.tryReleaseTask(ticket, taskSettings);\n    return { result: 'completed' };\n  }\n\n  /**\n   * Perform the initial store of the task info\n   */\n  async persistTask(settings: TaskSettingsV2) {\n    // Perform an initial parse to ensure that we will definitely be able to\n    // read it back again.\n    taskSettingsV2Schema.parse(settings);\n\n    const isCron = !settings?.cadence.startsWith('P');\n\n    let startAt: Knex.Raw;\n    if (settings.initialDelayDuration) {\n      startAt = nowPlus(\n        Duration.fromISO(settings.initialDelayDuration),\n        this.knex,\n      );\n    } else if (isCron) {\n      const time = new CronTime(settings.cadence)\n        .sendAt()\n        .add({ seconds: -1 }) // immediately, if \"* * * * * *\"\n        .toISOString();\n      startAt = this.knex.client.config.client.includes('sqlite3')\n        ? this.knex.raw('datetime(?)', [time])\n        : this.knex.raw(`?`, [time]);\n    } else {\n      startAt = this.knex.fn.now();\n    }\n\n    this.logger.debug(`task: ${this.taskId} configured to run at: ${startAt}`);\n\n    // It's OK if the task already exists; if it does, just replace its\n    // settings with the new value and start the loop as usual.\n    await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .insert({\n        id: this.taskId,\n        settings_json: JSON.stringify(settings),\n        next_run_start_at: startAt,\n      })\n      .onConflict('id')\n      .merge(['settings_json']);\n  }\n\n  /**\n   * Check if the task is ready to run\n   */\n  async findReadyTask(): Promise<\n    | { result: 'not-ready-yet' }\n    | { result: 'abort' }\n    | { result: 'ready'; settings: TaskSettingsV2 }\n  > {\n    const [row] = await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .where('id', '=', this.taskId)\n      .select({\n        settingsJson: 'settings_json',\n        ready: this.knex.raw(\n          `CASE\n            WHEN next_run_start_at <= ? AND current_run_ticket IS NULL THEN TRUE\n            ELSE FALSE\n          END`,\n          [this.knex.fn.now()],\n        ),\n      });\n\n    if (!row) {\n      this.logger.info(\n        'No longer able to find task; aborting and assuming that it has been unregistered or expired',\n      );\n      return { result: 'abort' };\n    } else if (!row.ready) {\n      return { result: 'not-ready-yet' };\n    }\n\n    try {\n      const obj = JSON.parse(row.settingsJson);\n      const settings = taskSettingsV2Schema.parse(obj);\n      return { result: 'ready', settings };\n    } catch (e) {\n      this.logger.info(\n        `Task \"${this.taskId}\" is no longer able to parse task settings; aborting and assuming that a ` +\n          `newer version of the task has been issued and being handled by other workers, ${e}`,\n      );\n      return { result: 'abort' };\n    }\n  }\n\n  /**\n   * Attempts to claim a task that's ready for execution, on this worker's\n   * behalf. We should not attempt to perform the work unless the claim really\n   * goes through.\n   *\n   * @param ticket - A globally unique string that changes for each invocation\n   * @param settings - The settings of the task to claim\n   * @returns True if it was successfully claimed\n   */\n  async tryClaimTask(\n    ticket: string,\n    settings: TaskSettingsV2,\n  ): Promise<boolean> {\n    const startedAt = this.knex.fn.now();\n    const expiresAt = settings.timeoutAfterDuration\n      ? nowPlus(Duration.fromISO(settings.timeoutAfterDuration), this.knex)\n      : this.knex.raw('null');\n\n    const rows = await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .where('id', '=', this.taskId)\n      .whereNull('current_run_ticket')\n      .update({\n        current_run_ticket: ticket,\n        current_run_started_at: startedAt,\n        current_run_expires_at: expiresAt,\n      });\n\n    return rows === 1;\n  }\n\n  async tryReleaseTask(\n    ticket: string,\n    settings: TaskSettingsV2,\n  ): Promise<boolean> {\n    const isCron = !settings?.cadence.startsWith('P');\n\n    let nextRun: Knex.Raw;\n    if (isCron) {\n      const time = new CronTime(settings.cadence).sendAt().toISOString();\n      this.logger.debug(`task: ${this.taskId} will next occur around ${time}`);\n      nextRun = this.knex.client.config.client.includes('sqlite3')\n        ? this.knex.raw('datetime(?)', [time])\n        : this.knex.raw(`?`, [time]);\n    } else {\n      const dt = Duration.fromISO(settings.cadence).as('seconds');\n      this.logger.debug(\n        `task: ${this.taskId} will next occur around ${DateTime.now().plus({\n          seconds: dt,\n        })}`,\n      );\n      nextRun = this.knex.client.config.client.includes('sqlite3')\n        ? this.knex.raw('datetime(next_run_start_at, ?)', [`+${dt} seconds`])\n        : this.knex.raw(`next_run_start_at + interval '${dt} seconds'`);\n    }\n\n    const rows = await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .where('id', '=', this.taskId)\n      .where('current_run_ticket', '=', ticket)\n      .update({\n        next_run_start_at: nextRun,\n        current_run_ticket: this.knex.raw('null'),\n        current_run_started_at: this.knex.raw('null'),\n        current_run_expires_at: this.knex.raw('null'),\n      });\n\n    return rows === 1;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport { Logger } from 'winston';\nimport { TaskWorker } from './TaskWorker';\nimport {\n  PluginTaskScheduler,\n  TaskInvocationDefinition,\n  TaskRunner,\n  TaskScheduleDefinition,\n} from './types';\nimport { validateId } from './util';\n\n/**\n * Implements the actual task management.\n */\nexport class PluginTaskSchedulerImpl implements PluginTaskScheduler {\n  constructor(\n    private readonly databaseFactory: () => Promise<Knex>,\n    private readonly logger: Logger,\n  ) {}\n\n  async scheduleTask(\n    task: TaskScheduleDefinition & TaskInvocationDefinition,\n  ): Promise<void> {\n    validateId(task.id);\n\n    const knex = await this.databaseFactory();\n    const worker = new TaskWorker(task.id, task.fn, knex, this.logger);\n\n    await worker.start(\n      {\n        version: 2,\n        cadence:\n          'cron' in task.frequency\n            ? task.frequency.cron\n            : task.frequency.toISO(),\n        initialDelayDuration: task.initialDelay?.toISO(),\n        timeoutAfterDuration: task.timeout.toISO(),\n      },\n      {\n        signal: task.signal,\n      },\n    );\n  }\n\n  createScheduledTaskRunner(schedule: TaskScheduleDefinition): TaskRunner {\n    return {\n      run: async task => {\n        await this.scheduleTask({ ...task, ...schedule });\n      },\n    };\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport { Duration } from 'luxon';\nimport { AbortSignal } from 'node-abort-controller';\nimport { Logger } from 'winston';\nimport { DbTasksRow, DB_TASKS_TABLE } from '../database/tables';\nimport { sleep } from './util';\n\n/**\n * Makes sure to auto-expire and clean up things that time out or for other\n * reasons should not be left lingering.\n */\nexport class PluginTaskSchedulerJanitor {\n  private readonly knex: Knex;\n  private readonly waitBetweenRuns: Duration;\n  private readonly logger: Logger;\n\n  constructor(options: {\n    knex: Knex;\n    waitBetweenRuns: Duration;\n    logger: Logger;\n  }) {\n    this.knex = options.knex;\n    this.waitBetweenRuns = options.waitBetweenRuns;\n    this.logger = options.logger;\n  }\n\n  async start(abortSignal?: AbortSignal) {\n    while (!abortSignal?.aborted) {\n      try {\n        await this.runOnce();\n      } catch (e) {\n        this.logger.warn(`Error while performing janitorial tasks, ${e}`);\n      }\n\n      await sleep(this.waitBetweenRuns, abortSignal);\n    }\n  }\n\n  private async runOnce() {\n    // SQLite currently (Oct 1 2021) returns a number for returning()\n    // statements, effectively ignoring them and instead returning the outcome\n    // of the delete() - and knex also emits a warning about that fact, which\n    // is why we avoid that entirely for the sqlite3 driver.\n    // https://github.com/knex/knex/issues/4370\n    // https://github.com/mapbox/node-sqlite3/issues/1453\n\n    const dbNull = this.knex.raw('null');\n\n    const tasks = await this.knex<DbTasksRow>(DB_TASKS_TABLE)\n      .where('current_run_expires_at', '<', this.knex.fn.now())\n      .update({\n        current_run_ticket: dbNull,\n        current_run_started_at: dbNull,\n        current_run_expires_at: dbNull,\n      })\n      .returning(['id']);\n\n    // sqlite ignores \"returning\", returns number of rows changed instead\n    if (typeof tasks === 'number') {\n      if (tasks > 0) {\n        this.logger.warn(`${tasks} tasks timed out and were lost`);\n      }\n    } else {\n      for (const { id } of tasks) {\n        this.logger.warn(`Task timed out and was lost: ${id}`);\n      }\n    }\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DatabaseManager, getRootLogger } from '@backstage/backend-common';\nimport { Config } from '@backstage/config';\nimport { once } from 'lodash';\nimport { Duration } from 'luxon';\nimport { Logger } from 'winston';\nimport { migrateBackendTasks } from '../database/migrateBackendTasks';\nimport { PluginTaskSchedulerImpl } from './PluginTaskSchedulerImpl';\nimport { PluginTaskSchedulerJanitor } from './PluginTaskSchedulerJanitor';\nimport { PluginTaskScheduler } from './types';\n\n/**\n * Deals with the scheduling of distributed tasks.\n *\n * @public\n */\nexport class TaskScheduler {\n  static fromConfig(\n    config: Config,\n    options?: {\n      databaseManager?: DatabaseManager;\n      logger?: Logger;\n    },\n  ): TaskScheduler {\n    const databaseManager =\n      options?.databaseManager ?? DatabaseManager.fromConfig(config);\n    const logger = (options?.logger || getRootLogger()).child({\n      type: 'taskManager',\n    });\n    return new TaskScheduler(databaseManager, logger);\n  }\n\n  constructor(\n    private readonly databaseManager: DatabaseManager,\n    private readonly logger: Logger,\n  ) {}\n\n  /**\n   * Instantiates a task manager instance for the given plugin.\n   *\n   * @param pluginId - The unique ID of the plugin, for example \"catalog\"\n   * @returns A {@link PluginTaskScheduler} instance\n   */\n  forPlugin(pluginId: string): PluginTaskScheduler {\n    const databaseFactory = once(async () => {\n      const knex = await this.databaseManager.forPlugin(pluginId).getClient();\n\n      await migrateBackendTasks(knex);\n\n      const janitor = new PluginTaskSchedulerJanitor({\n        knex,\n        waitBetweenRuns: Duration.fromObject({ minutes: 1 }),\n        logger: this.logger,\n      });\n      janitor.start();\n\n      return knex;\n    });\n\n    return new PluginTaskSchedulerImpl(\n      databaseFactory,\n      this.logger.child({ plugin: pluginId }),\n    );\n  }\n}\n"],"names":["resolvePackagePath","Duration","CronTime","z","InputError","AbortController","uuid","DateTime","DatabaseManager","getRootLogger","once"],"mappings":"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"}
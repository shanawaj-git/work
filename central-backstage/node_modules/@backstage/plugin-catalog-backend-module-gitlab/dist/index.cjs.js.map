{"version":3,"file":"index.cjs.js","sources":["../src/lib/client.ts","../src/GitLabDiscoveryProcessor.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fetch from 'node-fetch';\nimport {\n  getGitLabRequestOptions,\n  GitLabIntegrationConfig,\n} from '@backstage/integration';\nimport { Logger } from 'winston';\n\nexport type ListOptions = {\n  [key: string]: string | number | boolean | undefined;\n  group?: string;\n  per_page?: number | undefined;\n  page?: number | undefined;\n};\n\nexport type PagedResponse<T> = {\n  items: T[];\n  nextPage?: number;\n};\n\nexport class GitLabClient {\n  private readonly config: GitLabIntegrationConfig;\n  private readonly logger: Logger;\n\n  constructor(options: { config: GitLabIntegrationConfig; logger: Logger }) {\n    this.config = options.config;\n    this.logger = options.logger;\n  }\n\n  /**\n   * Indicates whether the client is for a SaaS or self managed GitLab instance.\n   */\n  isSelfManaged(): boolean {\n    return this.config.host !== 'gitlab.com';\n  }\n\n  async listProjects(options?: ListOptions): Promise<PagedResponse<any>> {\n    if (options?.group) {\n      return this.pagedRequest(\n        `/groups/${encodeURIComponent(options?.group)}/projects`,\n        {\n          ...options,\n          include_subgroups: true,\n        },\n      );\n    }\n\n    return this.pagedRequest(`/projects`, options);\n  }\n\n  /**\n   * Performs a request against a given paginated GitLab endpoint.\n   *\n   * This method may be used to perform authenticated REST calls against any\n   * paginated GitLab endpoint which uses X-NEXT-PAGE headers. The return value\n   * can be be used with the {@link paginated} async-generator function to yield\n   * each item from the paged request.\n   *\n   * @see {@link paginated}\n   * @param endpoint - The request endpoint, e.g. /projects.\n   * @param options - Request queryString options which may also include page variables.\n   */\n  async pagedRequest<T = any>(\n    endpoint: string,\n    options?: ListOptions,\n  ): Promise<PagedResponse<T>> {\n    const request = new URL(`${this.config.apiBaseUrl}${endpoint}`);\n    for (const key in options) {\n      if (options[key]) {\n        request.searchParams.append(key, options[key]!.toString());\n      }\n    }\n\n    this.logger.debug(`Fetching: ${request.toString()}`);\n    const response = await fetch(\n      request.toString(),\n      getGitLabRequestOptions(this.config),\n    );\n    if (!response.ok) {\n      throw new Error(\n        `Unexpected response when fetching ${request.toString()}. Expected 200 but got ${\n          response.status\n        } - ${response.statusText}`,\n      );\n    }\n    return response.json().then(items => {\n      const nextPage = response.headers.get('x-next-page');\n\n      return {\n        items,\n        nextPage: nextPage ? Number(nextPage) : null,\n      } as PagedResponse<any>;\n    });\n  }\n}\n\n/**\n * Advances through each page and provides each item from a paginated request.\n *\n * The async generator function yields each item from repeated calls to the\n * provided request function. The generator walks through each available page by\n * setting the page key in the options passed into the request function and\n * making repeated calls until there are no more pages.\n *\n * @see {@link pagedRequest}\n * @param request - Function which returns a PagedResponse to walk through.\n * @param options - Initial ListOptions for the request function.\n */\nexport async function* paginated<T = any>(\n  request: (options: ListOptions) => Promise<PagedResponse<T>>,\n  options: ListOptions,\n) {\n  let res;\n  do {\n    res = await request(options);\n    options.page = res.nextPage;\n    for (const item of res.items) {\n      yield item;\n    }\n  } while (res.nextPage);\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CacheClient,\n  CacheManager,\n  PluginCacheManager,\n} from '@backstage/backend-common';\nimport { Config } from '@backstage/config';\nimport {\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  LocationSpec,\n  processingResult,\n} from '@backstage/plugin-catalog-backend';\nimport { Logger } from 'winston';\nimport { GitLabClient, GitLabProject, paginated } from './lib';\n\n/**\n * Extracts repositories out of an GitLab instance.\n * @public\n */\nexport class GitLabDiscoveryProcessor implements CatalogProcessor {\n  private readonly integrations: ScmIntegrationRegistry;\n  private readonly logger: Logger;\n  private readonly cache: CacheClient;\n\n  static fromConfig(config: Config, options: { logger: Logger }) {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const pluginCache =\n      CacheManager.fromConfig(config).forPlugin('gitlab-discovery');\n\n    return new GitLabDiscoveryProcessor({\n      ...options,\n      integrations,\n      pluginCache,\n    });\n  }\n\n  private constructor(options: {\n    integrations: ScmIntegrationRegistry;\n    pluginCache: PluginCacheManager;\n    logger: Logger;\n  }) {\n    this.integrations = options.integrations;\n    this.cache = options.pluginCache.getClient();\n    this.logger = options.logger;\n  }\n\n  getProcessorName(): string {\n    return 'GitLabDiscoveryProcessor';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    _optional: boolean,\n    emit: CatalogProcessorEmit,\n  ): Promise<boolean> {\n    if (location.type !== 'gitlab-discovery') {\n      return false;\n    }\n\n    const { group, host, branch, catalogPath } = parseUrl(location.target);\n\n    const integration = this.integrations.gitlab.byUrl(`https://${host}`);\n    if (!integration) {\n      throw new Error(\n        `There is no GitLab integration that matches ${host}. Please add a configuration entry for it under integrations.gitlab`,\n      );\n    }\n\n    const client = new GitLabClient({\n      config: integration.config,\n      logger: this.logger,\n    });\n    const startTimestamp = Date.now();\n    this.logger.debug(`Reading GitLab projects from ${location.target}`);\n\n    const projects = paginated(options => client.listProjects(options), {\n      group,\n      last_activity_after: await this.updateLastActivity(),\n      page: 1,\n    });\n\n    const res: Result = {\n      scanned: 0,\n      matches: [],\n    };\n    for await (const project of projects) {\n      res.scanned++;\n\n      if (project.archived) {\n        continue;\n      }\n\n      if (branch === '*' && project.default_branch === undefined) {\n        continue;\n      }\n\n      res.matches.push(project);\n    }\n\n    for (const project of res.matches) {\n      const project_branch = branch === '*' ? project.default_branch : branch;\n\n      emit(\n        processingResult.location({\n          type: 'url',\n          // The format expected by the GitLabUrlReader:\n          // https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n          //\n          // This unfortunately will trigger another API call in `getGitLabFileFetchUrl` to get the project ID.\n          // The alternative is using the `buildRawUrl` function, which does not support subgroups, so providing a raw\n          // URL here won't work either.\n          target: `${project.web_url}/-/blob/${project_branch}/${catalogPath}`,\n          presence: 'optional',\n        }),\n      );\n    }\n\n    const duration = ((Date.now() - startTimestamp) / 1000).toFixed(1);\n    this.logger.debug(\n      `Read ${res.scanned} GitLab repositories in ${duration} seconds`,\n    );\n\n    return true;\n  }\n\n  private async updateLastActivity(): Promise<string | undefined> {\n    const cacheKey = `processors/${this.getProcessorName()}/last-activity`;\n    const lastActivity = await this.cache.get(cacheKey);\n    await this.cache.set(cacheKey, new Date().toISOString());\n    return lastActivity as string | undefined;\n  }\n}\n\ntype Result = {\n  scanned: number;\n  matches: GitLabProject[];\n};\n\n/*\n * Helpers\n */\n\nexport function parseUrl(urlString: string): {\n  group?: string;\n  host: string;\n  branch: string;\n  catalogPath: string;\n} {\n  const url = new URL(urlString);\n  const path = url.pathname.substr(1).split('/');\n\n  // (/group/subgroup)/blob/branch|*/filepath\n  const blobIndex = path.findIndex(p => p === 'blob');\n  if (blobIndex !== -1 && path.length > blobIndex + 2) {\n    const group =\n      blobIndex > 0 ? path.slice(0, blobIndex).join('/') : undefined;\n\n    return {\n      group,\n      host: url.host,\n      branch: decodeURIComponent(path[blobIndex + 1]),\n      catalogPath: decodeURIComponent(path.slice(blobIndex + 2).join('/')),\n    };\n  }\n\n  throw new Error(`Failed to parse ${urlString}`);\n}\n"],"names":["fetch","getGitLabRequestOptions","ScmIntegrations","CacheManager","processingResult"],"mappings":"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"}
{"version":3,"file":"index.cjs.js","sources":["../src/service/router.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport express from 'express';\nimport Router from 'express-promise-router';\nimport {\n  createProxyMiddleware,\n  Options,\n  RequestHandler,\n} from 'http-proxy-middleware';\nimport { Logger } from 'winston';\nimport http from 'http';\nimport { PluginEndpointDiscovery } from '@backstage/backend-common';\n\n// A list of headers that are always forwarded to the proxy targets.\nconst safeForwardHeaders = [\n  // https://fetch.spec.whatwg.org/#cors-safelisted-request-header\n  'cache-control',\n  'content-language',\n  'content-length',\n  'content-type',\n  'expires',\n  'last-modified',\n  'pragma',\n\n  // host is overridden by default. if changeOrigin is configured to false,\n  // we assume this is a intentional and should also be forwarded.\n  'host',\n\n  // other headers that we assume to be ok\n  'accept',\n  'accept-language',\n  'user-agent',\n];\n\nexport interface RouterOptions {\n  logger: Logger;\n  config: Config;\n  discovery: PluginEndpointDiscovery;\n  skipInvalidProxies?: boolean;\n}\n\nexport interface ProxyConfig extends Options {\n  allowedMethods?: string[];\n  allowedHeaders?: string[];\n}\n\n// Creates a proxy middleware, possibly with defaults added on top of the\n// given config.\nexport function buildMiddleware(\n  pathPrefix: string,\n  logger: Logger,\n  route: string,\n  config: string | ProxyConfig,\n): RequestHandler {\n  const fullConfig =\n    typeof config === 'string' ? { target: config } : { ...config };\n\n  // Validate that target is a valid URL.\n  if (typeof fullConfig.target !== 'string') {\n    throw new Error(`Proxy target must be a string`);\n  }\n  try {\n    // eslint-disable-next-line no-new\n    new URL(fullConfig.target! as string);\n  } catch {\n    throw new Error(\n      `Proxy target is not a valid URL: ${fullConfig.target ?? ''}`,\n    );\n  }\n\n  // Default is to do a path rewrite that strips out the proxy's path prefix\n  // and the rest of the route.\n  if (fullConfig.pathRewrite === undefined) {\n    let routeWithSlash = route.endsWith('/') ? route : `${route}/`;\n\n    if (!pathPrefix.endsWith('/') && !routeWithSlash.startsWith('/')) {\n      // Need to insert a / between pathPrefix and routeWithSlash\n      routeWithSlash = `/${routeWithSlash}`;\n    } else if (pathPrefix.endsWith('/') && routeWithSlash.startsWith('/')) {\n      // Never expect this to happen at this point in time as\n      // pathPrefix is set using `getExternalBaseUrl` which \"Returns the\n      // external HTTP base backend URL for a given plugin,\n      // **without a trailing slash.**\". But in case this changes in future, we\n      // need to drop a / on either pathPrefix or routeWithSlash\n      routeWithSlash = routeWithSlash.substring(1);\n    }\n\n    // The ? makes the slash optional for the rewrite, so that a base path without an ending slash\n    // will also be matched (e.g. '/sample' and then requesting just '/api/proxy/sample' without an\n    // ending slash). Otherwise the target gets called with the full '/api/proxy/sample' path\n    // appended.\n    fullConfig.pathRewrite = {\n      [`^${pathPrefix}${routeWithSlash}?`]: '/',\n    };\n  }\n\n  // Default is to update the Host header to the target\n  if (fullConfig.changeOrigin === undefined) {\n    fullConfig.changeOrigin = true;\n  }\n\n  // Attach the logger to the proxy config\n  fullConfig.logProvider = () => logger;\n\n  // Only return the allowed HTTP headers to not forward unwanted secret headers\n  const requestHeaderAllowList = new Set<string>(\n    [\n      // allow all safe headers\n      ...safeForwardHeaders,\n\n      // allow all headers that are set by the proxy\n      ...((fullConfig.headers && Object.keys(fullConfig.headers)) || []),\n\n      // allow all configured headers\n      ...(fullConfig.allowedHeaders || []),\n    ].map(h => h.toLocaleLowerCase()),\n  );\n\n  // Use the custom middleware filter to do two things:\n  //  1. Remove any headers not in the allow list to stop them being forwarded\n  //  2. Only permit the allowed HTTP methods if configured\n  //\n  // We are filtering the proxy request headers here rather than in\n  // `onProxyReq` because when global-agent is enabled then `onProxyReq`\n  // fires _after_ the agent has already sent the headers to the proxy\n  // target, causing a ERR_HTTP_HEADERS_SENT crash\n  const filter = (_pathname: string, req: http.IncomingMessage): boolean => {\n    const headerNames = Object.keys(req.headers);\n    headerNames.forEach(h => {\n      if (!requestHeaderAllowList.has(h.toLocaleLowerCase())) {\n        delete req.headers[h];\n      }\n    });\n\n    return fullConfig?.allowedMethods?.includes(req.method!) ?? true;\n  };\n  // Makes http-proxy-middleware logs look nicer and include the mount path\n  filter.toString = () => route;\n\n  // Only forward the allowed HTTP headers to not forward unwanted secret headers\n  const responseHeaderAllowList = new Set<string>(\n    [\n      // allow all safe headers\n      ...safeForwardHeaders,\n\n      // allow all configured headers\n      ...(fullConfig.allowedHeaders || []),\n    ].map(h => h.toLocaleLowerCase()),\n  );\n\n  // only forward the allowed headers in backend->client\n  fullConfig.onProxyRes = (proxyRes: http.IncomingMessage) => {\n    const headerNames = Object.keys(proxyRes.headers);\n\n    headerNames.forEach(h => {\n      if (!responseHeaderAllowList.has(h.toLocaleLowerCase())) {\n        delete proxyRes.headers[h];\n      }\n    });\n  };\n\n  return createProxyMiddleware(filter, fullConfig);\n}\n\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const router = Router();\n\n  const externalUrl = await options.discovery.getExternalBaseUrl('proxy');\n  const { pathname: pathPrefix } = new URL(externalUrl);\n\n  const proxyConfig = options.config.getOptional('proxy') ?? {};\n\n  Object.entries(proxyConfig).forEach(([route, proxyRouteConfig]) => {\n    try {\n      router.use(\n        route,\n        buildMiddleware(pathPrefix, options.logger, route, proxyRouteConfig),\n      );\n    } catch (e) {\n      if (options.skipInvalidProxies) {\n        options.logger.warn(`skipped configuring ${route} due to ${e.message}`);\n      } else {\n        throw e;\n      }\n    }\n  });\n\n  return router;\n}\n"],"names":["createProxyMiddleware","Router"],"mappings":";;;;;;;;;;;AA6BA,MAAM,qBAAqB;AAAA,EAEzB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAIA;AAAA,EAGA;AAAA,EACA;AAAA,EACA;AAAA;yBAkBA,YACA,QACA,OACA,QACgB;AApElB;AAqEE,QAAM,aACJ,OAAO,WAAW,WAAW,EAAE,QAAQ,WAAW,KAAK;AAGzD,MAAI,OAAO,WAAW,WAAW,UAAU;AACzC,UAAM,IAAI,MAAM;AAAA;AAElB,MAAI;AAEF,QAAI,IAAI,WAAW;AAAA,UACnB;AACA,UAAM,IAAI,MACR,oCAAoC,iBAAW,WAAX,YAAqB;AAAA;AAM7D,MAAI,WAAW,gBAAgB,QAAW;AACxC,QAAI,iBAAiB,MAAM,SAAS,OAAO,QAAQ,GAAG;AAEtD,QAAI,CAAC,WAAW,SAAS,QAAQ,CAAC,eAAe,WAAW,MAAM;AAEhE,uBAAiB,IAAI;AAAA,eACZ,WAAW,SAAS,QAAQ,eAAe,WAAW,MAAM;AAMrE,uBAAiB,eAAe,UAAU;AAAA;AAO5C,eAAW,cAAc;AAAA,OACtB,IAAI,aAAa,oBAAoB;AAAA;AAAA;AAK1C,MAAI,WAAW,iBAAiB,QAAW;AACzC,eAAW,eAAe;AAAA;AAI5B,aAAW,cAAc,MAAM;AAG/B,QAAM,yBAAyB,IAAI,IACjC;AAAA,IAEE,GAAG;AAAA,IAGH,GAAK,WAAW,WAAW,OAAO,KAAK,WAAW,YAAa;AAAA,IAG/D,GAAI,WAAW,kBAAkB;AAAA,IACjC,IAAI,OAAK,EAAE;AAWf,QAAM,SAAS,CAAC,WAAmB,QAAuC;AA7I5E;AA8II,UAAM,cAAc,OAAO,KAAK,IAAI;AACpC,gBAAY,QAAQ,OAAK;AACvB,UAAI,CAAC,uBAAuB,IAAI,EAAE,sBAAsB;AACtD,eAAO,IAAI,QAAQ;AAAA;AAAA;AAIvB,WAAO,sDAAY,mBAAZ,oBAA4B,SAAS,IAAI,YAAzC,YAAqD;AAAA;AAG9D,SAAO,WAAW,MAAM;AAGxB,QAAM,0BAA0B,IAAI,IAClC;AAAA,IAEE,GAAG;AAAA,IAGH,GAAI,WAAW,kBAAkB;AAAA,IACjC,IAAI,OAAK,EAAE;AAIf,aAAW,aAAa,CAAC,aAAmC;AAC1D,UAAM,cAAc,OAAO,KAAK,SAAS;AAEzC,gBAAY,QAAQ,OAAK;AACvB,UAAI,CAAC,wBAAwB,IAAI,EAAE,sBAAsB;AACvD,eAAO,SAAS,QAAQ;AAAA;AAAA;AAAA;AAK9B,SAAOA,0CAAsB,QAAQ;AAAA;4BAIrC,SACyB;AArL3B;AAsLE,QAAM,SAASC;AAEf,QAAM,cAAc,MAAM,QAAQ,UAAU,mBAAmB;AAC/D,QAAM,EAAE,UAAU,eAAe,IAAI,IAAI;AAEzC,QAAM,cAAc,cAAQ,OAAO,YAAY,aAA3B,YAAuC;AAE3D,SAAO,QAAQ,aAAa,QAAQ,CAAC,CAAC,OAAO,sBAAsB;AACjE,QAAI;AACF,aAAO,IACL,OACA,gBAAgB,YAAY,QAAQ,QAAQ,OAAO;AAAA,aAE9C,GAAP;AACA,UAAI,QAAQ,oBAAoB;AAC9B,gBAAQ,OAAO,KAAK,uBAAuB,gBAAgB,EAAE;AAAA,aACxD;AACL,cAAM;AAAA;AAAA;AAAA;AAKZ,SAAO;AAAA;;;;"}
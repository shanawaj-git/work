{"version":3,"file":"index.esm.js","sources":["../src/api/ScmAuthApi.ts","../src/api/ScmAuth.ts","../src/api/ScmIntegrationsApi.ts","../src/components/ScmIntegrationIcon/ScmIntegrationIcon.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ApiRef,\n  createApiRef,\n  AuthRequestOptions,\n} from '@backstage/core-plugin-api';\n\n/**\n * The options that control a {@link ScmAuthApi.getCredentials} call.\n *\n * @public\n */\nexport interface ScmAuthTokenOptions extends AuthRequestOptions {\n  /**\n   * The URL of the SCM resource to be accessed.\n   *\n   * @example https://github.com/backstage/backstage\n   */\n  url: string;\n\n  /**\n   * Whether to request additional access scope.\n   *\n   * Read access to user, organization, and repositories is always included.\n   */\n  additionalScope?: {\n    /**\n     * Requests access to be able to write repository content, including\n     * the ability to create things like issues and pull requests.\n     */\n    repoWrite?: boolean;\n    /**\n     * Allow an arbitrary list of scopes provided from the user\n     * to request from the provider.\n     */\n    customScopes?: {\n      github?: string[];\n      azure?: string[];\n      bitbucket?: string[];\n      gitlab?: string[];\n    };\n  };\n}\n\n/**\n * The response from a {@link ScmAuthApi.getCredentials} call.\n *\n * @public\n */\nexport interface ScmAuthTokenResponse {\n  /**\n   * An authorization token that can be used to authenticate requests.\n   */\n  token: string;\n\n  /**\n   * The set of HTTP headers that are needed to authenticate requests.\n   */\n  headers: { [name: string]: string };\n}\n\n/**\n * ScmAuthApi provides methods for authenticating towards source code management services.\n *\n * As opposed to using the GitHub, GitLab and other auth APIs\n * directly, this API allows for more generic access to SCM services.\n *\n * @public\n */\nexport interface ScmAuthApi {\n  /**\n   * Requests credentials for accessing an SCM resource.\n   */\n  getCredentials(options: ScmAuthTokenOptions): Promise<ScmAuthTokenResponse>;\n}\n\n/**\n * The ApiRef for the ScmAuthApi.\n *\n * @public\n */\nexport const scmAuthApiRef: ApiRef<ScmAuthApi> = createApiRef({\n  id: 'core.scmauth',\n});\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  bitbucketAuthApiRef,\n  createApiFactory,\n  githubAuthApiRef,\n  gitlabAuthApiRef,\n  microsoftAuthApiRef,\n  OAuthApi,\n} from '@backstage/core-plugin-api';\nimport {\n  ScmAuthApi,\n  scmAuthApiRef,\n  ScmAuthTokenOptions,\n  ScmAuthTokenResponse,\n} from './ScmAuthApi';\n\ntype ScopeMapping = {\n  /** The base scopes used for all requests */\n  default: string[];\n  /** Additional scopes added if `repoWrite` is requested */\n  repoWrite: string[];\n};\n\n// An enum of all supported providers\ntype ProviderName = 'generic' | 'github' | 'azure' | 'bitbucket' | 'gitlab';\n\nclass ScmAuthMux implements ScmAuthApi {\n  #providers: Array<ScmAuth>;\n\n  constructor(providers: ScmAuth[]) {\n    this.#providers = providers;\n  }\n\n  async getCredentials(\n    options: ScmAuthTokenOptions,\n  ): Promise<ScmAuthTokenResponse> {\n    const url = new URL(options.url);\n    const provider = this.#providers.find(p => p.isUrlSupported(url));\n    if (!provider) {\n      throw new Error(\n        `No auth provider available for '${options.url}', see https://backstage.io/link?scm-auth`,\n      );\n    }\n\n    return provider.getCredentials(options);\n  }\n}\n\n/**\n * An implementation of the ScmAuthApi that merges together OAuthApi instances\n * to form a single instance that can handles authentication for multiple providers.\n *\n * @public\n *\n * @example\n * ```\n * // Supports authentication towards both public GitHub and GHE:\n * createApiFactory({\n *   api: scmAuthApiRef,\n *   deps: {\n *     gheAuthApi: gheAuthApiRef,\n *     githubAuthApi: githubAuthApiRef,\n *   },\n *   factory: ({ githubAuthApi, gheAuthApi }) =>\n *     ScmAuth.merge(\n *       ScmAuth.forGithub(githubAuthApi),\n *       ScmAuth.forGithub(gheAuthApi, {\n *         host: 'ghe.example.com',\n *       }),\n *     )\n * })\n * ```\n */\nexport class ScmAuth implements ScmAuthApi {\n  /**\n   * Creates an API factory that enables auth for each of the default SCM providers.\n   */\n  static createDefaultApiFactory() {\n    return createApiFactory({\n      api: scmAuthApiRef,\n      deps: {\n        github: githubAuthApiRef,\n        gitlab: gitlabAuthApiRef,\n        azure: microsoftAuthApiRef,\n        bitbucket: bitbucketAuthApiRef,\n      },\n      factory: ({ github, gitlab, azure, bitbucket }) =>\n        ScmAuth.merge(\n          ScmAuth.forGithub(github),\n          ScmAuth.forGitlab(gitlab),\n          ScmAuth.forAzure(azure),\n          ScmAuth.forBitbucket(bitbucket),\n        ),\n    });\n  }\n\n  /**\n   * Creates a general purpose ScmAuth instance with a custom scope mapping.\n   */\n  static forAuthApi(\n    authApi: OAuthApi,\n    options: {\n      host: string;\n      scopeMapping: {\n        default: string[];\n        repoWrite: string[];\n      };\n    },\n  ): ScmAuth {\n    return new ScmAuth('generic', authApi, options.host, options.scopeMapping);\n  }\n\n  /**\n   * Creates a new ScmAuth instance that handles authentication towards GitHub.\n   *\n   * The host option determines which URLs that are handled by this instance and defaults to `github.com`.\n   *\n   * The default scopes are:\n   *\n   * `repo read:org read:user`\n   *\n   * If the additional `repoWrite` permission is requested, these scopes are added:\n   *\n   * `gist`\n   */\n  static forGithub(\n    githubAuthApi: OAuthApi,\n    options?: {\n      host?: string;\n    },\n  ): ScmAuth {\n    const host = options?.host ?? 'github.com';\n    return new ScmAuth('github', githubAuthApi, host, {\n      default: ['repo', 'read:org', 'read:user'],\n      repoWrite: ['gist'],\n    });\n  }\n\n  /**\n   * Creates a new ScmAuth instance that handles authentication towards GitLab.\n   *\n   * The host option determines which URLs that are handled by this instance and defaults to `gitlab.com`.\n   *\n   * The default scopes are:\n   *\n   * `read_user read_api read_repository`\n   *\n   * If the additional `repoWrite` permission is requested, these scopes are added:\n   *\n   * `write_repository api`\n   */\n  static forGitlab(\n    gitlabAuthApi: OAuthApi,\n    options?: {\n      host?: string;\n    },\n  ): ScmAuth {\n    const host = options?.host ?? 'gitlab.com';\n    return new ScmAuth('gitlab', gitlabAuthApi, host, {\n      default: ['read_user', 'read_api', 'read_repository'],\n      repoWrite: ['write_repository', 'api'],\n    });\n  }\n\n  /**\n   * Creates a new ScmAuth instance that handles authentication towards Azure.\n   *\n   * The host option determines which URLs that are handled by this instance and defaults to `dev.azure.com`.\n   *\n   * The default scopes are:\n   *\n   * `vso.build vso.code vso.graph vso.project vso.profile`\n   *\n   * If the additional `repoWrite` permission is requested, these scopes are added:\n   *\n   * `vso.code_manage`\n   */\n  static forAzure(\n    microsoftAuthApi: OAuthApi,\n    options?: {\n      host?: string;\n    },\n  ): ScmAuth {\n    const host = options?.host ?? 'dev.azure.com';\n    return new ScmAuth('azure', microsoftAuthApi, host, {\n      default: [\n        'vso.build',\n        'vso.code',\n        'vso.graph',\n        'vso.project',\n        'vso.profile',\n      ],\n      repoWrite: ['vso.code_manage'],\n    });\n  }\n\n  /**\n   * Creates a new ScmAuth instance that handles authentication towards Bitbucket.\n   *\n   * The host option determines which URLs that are handled by this instance and defaults to `bitbucket.org`.\n   *\n   * The default scopes are:\n   *\n   * `account team pullrequest snippet issue`\n   *\n   * If the additional `repoWrite` permission is requested, these scopes are added:\n   *\n   * `pullrequest:write snippet:write issue:write`\n   */\n  static forBitbucket(\n    bitbucketAuthApi: OAuthApi,\n    options?: {\n      host?: string;\n    },\n  ): ScmAuth {\n    const host = options?.host ?? 'bitbucket.org';\n    return new ScmAuth('bitbucket', bitbucketAuthApi, host, {\n      default: ['account', 'team', 'pullrequest', 'snippet', 'issue'],\n      repoWrite: ['pullrequest:write', 'snippet:write', 'issue:write'],\n    });\n  }\n\n  /**\n   * Merges together multiple ScmAuth instances into one that\n   * routes requests to the correct instance based on the URL.\n   */\n  static merge(...providers: ScmAuth[]): ScmAuthApi {\n    return new ScmAuthMux(providers);\n  }\n\n  #api: OAuthApi;\n  #host: string;\n  #scopeMapping: ScopeMapping;\n  #providerName: ProviderName;\n\n  private constructor(\n    providerName: ProviderName,\n    api: OAuthApi,\n    host: string,\n    scopeMapping: ScopeMapping,\n  ) {\n    this.#api = api;\n    this.#host = host;\n    this.#scopeMapping = scopeMapping;\n    this.#providerName = providerName;\n  }\n\n  /**\n   * Checks whether the implementation is able to provide authentication for the given URL.\n   */\n  isUrlSupported(url: URL): boolean {\n    return url.host === this.#host;\n  }\n\n  private getAdditionalScopesForProvider(\n    additionalScopes: ScmAuthTokenOptions['additionalScope'],\n  ): string[] {\n    if (!additionalScopes?.customScopes || this.#providerName === 'generic') {\n      return [];\n    }\n\n    return additionalScopes.customScopes?.[this.#providerName] ?? [];\n  }\n\n  /**\n   * Fetches credentials for the given resource.\n   */\n  async getCredentials(\n    options: ScmAuthTokenOptions,\n  ): Promise<ScmAuthTokenResponse> {\n    const { url, additionalScope, ...restOptions } = options;\n\n    const scopes = this.#scopeMapping.default.slice();\n    if (additionalScope?.repoWrite) {\n      scopes.push(...this.#scopeMapping.repoWrite);\n    }\n\n    const additionalScopes =\n      this.getAdditionalScopesForProvider(additionalScope);\n\n    if (additionalScopes.length) {\n      scopes.push(...additionalScopes);\n    }\n\n    const uniqueScopes = [...new Set(scopes)];\n\n    const token = await this.#api.getAccessToken(uniqueScopes, restOptions);\n\n    return {\n      token,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport {\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport { ApiRef, createApiRef } from '@backstage/core-plugin-api';\n\n/**\n * Factory class for creating {@link @backstage/integration#ScmIntegrationRegistry} instances.\n *\n * @public\n */\nexport class ScmIntegrationsApi {\n  /**\n   * Instantiates an {@link @backstage/integration#ScmIntegrationRegistry}.\n   *\n   * @param config - The root of the config hierarchy.\n   */\n  static fromConfig(config: Config): ScmIntegrationRegistry {\n    return ScmIntegrations.fromConfig(config);\n  }\n}\n\n/**\n * The API that holds all configured SCM integrations.\n *\n * @public\n */\nexport const scmIntegrationsApiRef: ApiRef<ScmIntegrationRegistry> =\n  createApiRef({\n    id: 'integration.scmintegrations',\n  });\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport CodeIcon from '@material-ui/icons/Code';\nimport React from 'react';\nimport { useApp } from '@backstage/core-plugin-api';\n\n/**\n * Props for {@link ScmIntegrationIcon}.\n *\n * @public\n */\nexport type ScmIntegrationIconProps = {\n  /**\n   * The integration type, e.g. \"github\".\n   */\n  type?: string;\n};\n\n/**\n * An icon that represents a certain SCM integration.\n *\n * @public\n */\nexport const ScmIntegrationIcon = (props: ScmIntegrationIconProps) => {\n  const { type } = props;\n  const app = useApp();\n  const DefaultIcon = CodeIcon;\n  const Icon = type ? app.getSystemIcon(type) ?? DefaultIcon : DefaultIcon;\n  return <Icon />;\n};\n"],"names":[],"mappings":"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"}